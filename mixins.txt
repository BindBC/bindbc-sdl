// expansion at source/sdl/version_.d(51,1)
extern(C) @nogc nothrow __gshared{
	private void function(SDL_version* ver) _SDL_GetVersion;
	void SDL_GetVersion(SDL_version* ver){ _SDL_GetVersion(__traits(parameters)); }
	private const(char)* function() _SDL_GetRevision;
	const(char)* SDL_GetRevision(){ return _SDL_GetRevision(__traits(parameters)); }
	private int function() _SDL_GetRevisionNumber;
	int SDL_GetRevisionNumber(){ return _SDL_GetRevisionNumber(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetVersion, "SDL_GetVersion");
	lib.bindSymbol(cast(void**)&_SDL_GetRevision, "SDL_GetRevision");
	lib.bindSymbol(cast(void**)&_SDL_GetRevisionNumber, "SDL_GetRevisionNumber");
}

// expansion at source/sdl/assert_.d(36,1)
extern(C) @nogc nothrow __gshared{
	private void function(SDL_AssertionHandler handler, void* userdata) _SDL_SetAssertionHandler;
	void SDL_SetAssertionHandler(SDL_AssertionHandler handler, void* userdata){ _SDL_SetAssertionHandler(__traits(parameters)); }
	private const(SDL_assert_data)* function() _SDL_GetAssertionReport;
	const(SDL_assert_data)* SDL_GetAssertionReport(){ return _SDL_GetAssertionReport(__traits(parameters)); }
	private void function() _SDL_ResetAssertionReport;
	void SDL_ResetAssertionReport(){ _SDL_ResetAssertionReport(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_SetAssertionHandler, "SDL_SetAssertionHandler");
	lib.bindSymbol(cast(void**)&_SDL_GetAssertionReport, "SDL_GetAssertionReport");
	lib.bindSymbol(cast(void**)&_SDL_ResetAssertionReport, "SDL_ResetAssertionReport");
}

// expansion at source/sdl/stdinc.d(131,1)
extern(C) @nogc nothrow __gshared{
	private void* function(size_t size) _SDL_malloc;
	void* SDL_malloc(size_t size){ return _SDL_malloc(__traits(parameters)); }
	private void* function(size_t nmemb, size_t size) _SDL_calloc;
	void* SDL_calloc(size_t nmemb, size_t size){ return _SDL_calloc(__traits(parameters)); }
	private void* function(void* mem, size_t size) _SDL_realloc;
	void* SDL_realloc(void* mem, size_t size){ return _SDL_realloc(__traits(parameters)); }
	private void function(void* mem) _SDL_free;
	void SDL_free(void* mem){ _SDL_free(__traits(parameters)); }
	private char* function(const(char)* name) _SDL_getenv;
	char* SDL_getenv(const(char)* name){ return _SDL_getenv(__traits(parameters)); }
	private int function(const(char)* name, const(char)* value, int overwrite) _SDL_setenv;
	int SDL_setenv(const(char)* name, const(char)* value, int overwrite){ return _SDL_setenv(__traits(parameters)); }
	private void function(void* base, size_t nmemb, size_t size, int function(const(void)*, const(void)*) compare) _SDL_qsort;
	void SDL_qsort(void* base, size_t nmemb, size_t size, int function(const(void)*, const(void)*) compare){ _SDL_qsort(__traits(parameters)); }
	private int function(int x) _SDL_abs;
	int SDL_abs(int x){ return _SDL_abs(__traits(parameters)); }
	private int function(int x) _SDL_isdigit;
	int SDL_isdigit(int x){ return _SDL_isdigit(__traits(parameters)); }
	private int function(int x) _SDL_isspace;
	int SDL_isspace(int x){ return _SDL_isspace(__traits(parameters)); }
	private int function(int x) _SDL_toupper;
	int SDL_toupper(int x){ return _SDL_toupper(__traits(parameters)); }
	private int function(int x) _SDL_tolower;
	int SDL_tolower(int x){ return _SDL_tolower(__traits(parameters)); }
	private void* function(void* dst, int c, size_t len) _SDL_memset;
	void* SDL_memset(void* dst, int c, size_t len){ return _SDL_memset(__traits(parameters)); }
	private void* function(void* dst, const(void)* src, size_t len) _SDL_memcpy;
	void* SDL_memcpy(void* dst, const(void)* src, size_t len){ return _SDL_memcpy(__traits(parameters)); }
	private void* function(void* dst, const(void)* src, size_t len) _SDL_memmove;
	void* SDL_memmove(void* dst, const(void)* src, size_t len){ return _SDL_memmove(__traits(parameters)); }
	private int function(const(void)* s1, const(void)* s2, size_t len) _SDL_memcmp;
	int SDL_memcmp(const(void)* s1, const(void)* s2, size_t len){ return _SDL_memcmp(__traits(parameters)); }
	private size_t function(const(dchar)* wstr) _SDL_wcslen;
	size_t SDL_wcslen(const(dchar)* wstr){ return _SDL_wcslen(__traits(parameters)); }
	private size_t function(dchar* dst, const(dchar)* src, size_t maxlen) _SDL_wcslcpy;
	size_t SDL_wcslcpy(dchar* dst, const(dchar)* src, size_t maxlen){ return _SDL_wcslcpy(__traits(parameters)); }
	private size_t function(dchar* dst, const(dchar)* src, size_t maxlen) _SDL_wcslcat;
	size_t SDL_wcslcat(dchar* dst, const(dchar)* src, size_t maxlen){ return _SDL_wcslcat(__traits(parameters)); }
	private size_t function(const(char)* str) _SDL_strlen;
	size_t SDL_strlen(const(char)* str){ return _SDL_strlen(__traits(parameters)); }
	private size_t function(char* dst, const(char)* src, size_t maxlen) _SDL_strlcpy;
	size_t SDL_strlcpy(char* dst, const(char)* src, size_t maxlen){ return _SDL_strlcpy(__traits(parameters)); }
	private size_t function(char* dst, const(char)* src, size_t dst_bytes) _SDL_utf8strlcpy;
	size_t SDL_utf8strlcpy(char* dst, const(char)* src, size_t dst_bytes){ return _SDL_utf8strlcpy(__traits(parameters)); }
	private size_t function(char* dst, const(char)* src, size_t maxlen) _SDL_strlcat;
	size_t SDL_strlcat(char* dst, const(char)* src, size_t maxlen){ return _SDL_strlcat(__traits(parameters)); }
	private char* function(const(char)* str) _SDL_strdup;
	char* SDL_strdup(const(char)* str){ return _SDL_strdup(__traits(parameters)); }
	private char* function(char* str) _SDL_strrev;
	char* SDL_strrev(char* str){ return _SDL_strrev(__traits(parameters)); }
	private char* function(char* str) _SDL_strupr;
	char* SDL_strupr(char* str){ return _SDL_strupr(__traits(parameters)); }
	private char* function(char* str) _SDL_strlwr;
	char* SDL_strlwr(char* str){ return _SDL_strlwr(__traits(parameters)); }
	private char* function(const(char)* str, int c) _SDL_strchr;
	char* SDL_strchr(const(char)* str, int c){ return _SDL_strchr(__traits(parameters)); }
	private char* function(const(char)* str, int c) _SDL_strrchr;
	char* SDL_strrchr(const(char)* str, int c){ return _SDL_strrchr(__traits(parameters)); }
	private char* function(const(char)* haystack, const(char)* needle) _SDL_strstr;
	char* SDL_strstr(const(char)* haystack, const(char)* needle){ return _SDL_strstr(__traits(parameters)); }
	private char* function(int value, char* str, int radix) _SDL_itoa;
	char* SDL_itoa(int value, char* str, int radix){ return _SDL_itoa(__traits(parameters)); }
	private char* function(uint value, char* str, int radix) _SDL_uitoa;
	char* SDL_uitoa(uint value, char* str, int radix){ return _SDL_uitoa(__traits(parameters)); }
	private char* function(long value, char* str, int radix) _SDL_ltoa;
	char* SDL_ltoa(long value, char* str, int radix){ return _SDL_ltoa(__traits(parameters)); }
	private char* function(ulong value, char* str, int radix) _SDL_ultoa;
	char* SDL_ultoa(ulong value, char* str, int radix){ return _SDL_ultoa(__traits(parameters)); }
	private char* function(long value, char* str, int radix) _SDL_lltoa;
	char* SDL_lltoa(long value, char* str, int radix){ return _SDL_lltoa(__traits(parameters)); }
	private char* function(ulong value, char* str, int radix) _SDL_ulltoa;
	char* SDL_ulltoa(ulong value, char* str, int radix){ return _SDL_ulltoa(__traits(parameters)); }
	private int function(const(char)* str) _SDL_atoi;
	int SDL_atoi(const(char)* str){ return _SDL_atoi(__traits(parameters)); }
	private double function(const(char)* str) _SDL_atof;
	double SDL_atof(const(char)* str){ return _SDL_atof(__traits(parameters)); }
	private long function(const(char)* str, char** endp, int base) _SDL_strtol;
	long SDL_strtol(const(char)* str, char** endp, int base){ return _SDL_strtol(__traits(parameters)); }
	private ulong function(const(char)* str, char** endp, int base) _SDL_strtoul;
	ulong SDL_strtoul(const(char)* str, char** endp, int base){ return _SDL_strtoul(__traits(parameters)); }
	private long function(const(char)* str, char** endp, int base) _SDL_strtoll;
	long SDL_strtoll(const(char)* str, char** endp, int base){ return _SDL_strtoll(__traits(parameters)); }
	private ulong function(const(char)* str, char** endp, int base) _SDL_strtoull;
	ulong SDL_strtoull(const(char)* str, char** endp, int base){ return _SDL_strtoull(__traits(parameters)); }
	private double function(const(char)* str, char** endp) _SDL_strtod;
	double SDL_strtod(const(char)* str, char** endp){ return _SDL_strtod(__traits(parameters)); }
	private int function(const(char)* str1, const(char)* str2) _SDL_strcmp;
	int SDL_strcmp(const(char)* str1, const(char)* str2){ return _SDL_strcmp(__traits(parameters)); }
	private int function(const(char)* str1, const(char)* str2, size_t maxlen) _SDL_strncmp;
	int SDL_strncmp(const(char)* str1, const(char)* str2, size_t maxlen){ return _SDL_strncmp(__traits(parameters)); }
	private int function(const(char)* str1, const(char)* str2) _SDL_strcasecmp;
	int SDL_strcasecmp(const(char)* str1, const(char)* str2){ return _SDL_strcasecmp(__traits(parameters)); }
	private int function(const(char)* str1, const(char)* str2, size_t len) _SDL_strncasecmp;
	int SDL_strncasecmp(const(char)* str1, const(char)* str2, size_t len){ return _SDL_strncasecmp(__traits(parameters)); }
	private int function(const(char)* text, const(char)* fmt, ...) _SDL_sscanf;
	int SDL_sscanf(const(char)* text, const(char)* fmt, ...){ debug{import std.stdio;writeln(__traits(parameters));} return int(); }
	private int function(char* text, size_t maxlen, const(char)* fmt, ...) _SDL_snprintf;
	int SDL_snprintf(char* text, size_t maxlen, const(char)* fmt, ...){ debug{import std.stdio;writeln(__traits(parameters));} return int(); }
	private double function(double x) _SDL_atan;
	double SDL_atan(double x){ return _SDL_atan(__traits(parameters)); }
	private double function(double y, double x) _SDL_atan2;
	double SDL_atan2(double y, double x){ return _SDL_atan2(__traits(parameters)); }
	private double function(double x) _SDL_ceil;
	double SDL_ceil(double x){ return _SDL_ceil(__traits(parameters)); }
	private double function(double x, double y) _SDL_copysign;
	double SDL_copysign(double x, double y){ return _SDL_copysign(__traits(parameters)); }
	private double function(double x) _SDL_cos;
	double SDL_cos(double x){ return _SDL_cos(__traits(parameters)); }
	private float function(float x) _SDL_cosf;
	float SDL_cosf(float x){ return _SDL_cosf(__traits(parameters)); }
	private double function(double x) _SDL_fabs;
	double SDL_fabs(double x){ return _SDL_fabs(__traits(parameters)); }
	private double function(double x) _SDL_floor;
	double SDL_floor(double x){ return _SDL_floor(__traits(parameters)); }
	private double function(double x) _SDL_log;
	double SDL_log(double x){ return _SDL_log(__traits(parameters)); }
	private double function(double x, double y) _SDL_pow;
	double SDL_pow(double x, double y){ return _SDL_pow(__traits(parameters)); }
	private double function(double x, int n) _SDL_scalbn;
	double SDL_scalbn(double x, int n){ return _SDL_scalbn(__traits(parameters)); }
	private double function(double x) _SDL_sin;
	double SDL_sin(double x){ return _SDL_sin(__traits(parameters)); }
	private float function(float x) _SDL_sinf;
	float SDL_sinf(float x){ return _SDL_sinf(__traits(parameters)); }
	private double function(double x) _SDL_sqrt;
	double SDL_sqrt(double x){ return _SDL_sqrt(__traits(parameters)); }
	private SDL_iconv_t* function(const(char)* tocode, const(char)* fromcode) _SDL_iconv_open;
	SDL_iconv_t* SDL_iconv_open(const(char)* tocode, const(char)* fromcode){ return _SDL_iconv_open(__traits(parameters)); }
	private int function(SDL_iconv_t* cd) _SDL_iconv_close;
	int SDL_iconv_close(SDL_iconv_t* cd){ return _SDL_iconv_close(__traits(parameters)); }
	private size_t function(SDL_iconv_t* cd, const(char)** inbuf, size_t* inbytesleft, char** outbuf, size_t* outbytesleft) _SDL_iconv;
	size_t SDL_iconv(SDL_iconv_t* cd, const(char)** inbuf, size_t* inbytesleft, char** outbuf, size_t* outbytesleft){ return _SDL_iconv(__traits(parameters)); }
	private char* function(const(char)* tocode, const(char)* fromcode, const(char)* inbuf, size_t inbytesleft) _SDL_iconv_string;
	char* SDL_iconv_string(const(char)* tocode, const(char)* fromcode, const(char)* inbuf, size_t inbytesleft){ return _SDL_iconv_string(__traits(parameters)); }
	private int function(char* text, size_t maxlen, const(char)* fmt, va_list ap) _SDL_vsnprintf;
	int SDL_vsnprintf(char* text, size_t maxlen, const(char)* fmt, va_list ap){ return _SDL_vsnprintf(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_malloc, "SDL_malloc");
	lib.bindSymbol(cast(void**)&_SDL_calloc, "SDL_calloc");
	lib.bindSymbol(cast(void**)&_SDL_realloc, "SDL_realloc");
	lib.bindSymbol(cast(void**)&_SDL_free, "SDL_free");
	lib.bindSymbol(cast(void**)&_SDL_getenv, "SDL_getenv");
	lib.bindSymbol(cast(void**)&_SDL_setenv, "SDL_setenv");
	lib.bindSymbol(cast(void**)&_SDL_qsort, "SDL_qsort");
	lib.bindSymbol(cast(void**)&_SDL_abs, "SDL_abs");
	lib.bindSymbol(cast(void**)&_SDL_isdigit, "SDL_isdigit");
	lib.bindSymbol(cast(void**)&_SDL_isspace, "SDL_isspace");
	lib.bindSymbol(cast(void**)&_SDL_toupper, "SDL_toupper");
	lib.bindSymbol(cast(void**)&_SDL_tolower, "SDL_tolower");
	lib.bindSymbol(cast(void**)&_SDL_memset, "SDL_memset");
	lib.bindSymbol(cast(void**)&_SDL_memcpy, "SDL_memcpy");
	lib.bindSymbol(cast(void**)&_SDL_memmove, "SDL_memmove");
	lib.bindSymbol(cast(void**)&_SDL_memcmp, "SDL_memcmp");
	lib.bindSymbol(cast(void**)&_SDL_wcslen, "SDL_wcslen");
	lib.bindSymbol(cast(void**)&_SDL_wcslcpy, "SDL_wcslcpy");
	lib.bindSymbol(cast(void**)&_SDL_wcslcat, "SDL_wcslcat");
	lib.bindSymbol(cast(void**)&_SDL_strlen, "SDL_strlen");
	lib.bindSymbol(cast(void**)&_SDL_strlcpy, "SDL_strlcpy");
	lib.bindSymbol(cast(void**)&_SDL_utf8strlcpy, "SDL_utf8strlcpy");
	lib.bindSymbol(cast(void**)&_SDL_strlcat, "SDL_strlcat");
	lib.bindSymbol(cast(void**)&_SDL_strdup, "SDL_strdup");
	lib.bindSymbol(cast(void**)&_SDL_strrev, "SDL_strrev");
	lib.bindSymbol(cast(void**)&_SDL_strupr, "SDL_strupr");
	lib.bindSymbol(cast(void**)&_SDL_strlwr, "SDL_strlwr");
	lib.bindSymbol(cast(void**)&_SDL_strchr, "SDL_strchr");
	lib.bindSymbol(cast(void**)&_SDL_strrchr, "SDL_strrchr");
	lib.bindSymbol(cast(void**)&_SDL_strstr, "SDL_strstr");
	lib.bindSymbol(cast(void**)&_SDL_itoa, "SDL_itoa");
	lib.bindSymbol(cast(void**)&_SDL_uitoa, "SDL_uitoa");
	lib.bindSymbol(cast(void**)&_SDL_ltoa, "SDL_ltoa");
	lib.bindSymbol(cast(void**)&_SDL_ultoa, "SDL_ultoa");
	lib.bindSymbol(cast(void**)&_SDL_lltoa, "SDL_lltoa");
	lib.bindSymbol(cast(void**)&_SDL_ulltoa, "SDL_ulltoa");
	lib.bindSymbol(cast(void**)&_SDL_atoi, "SDL_atoi");
	lib.bindSymbol(cast(void**)&_SDL_atof, "SDL_atof");
	lib.bindSymbol(cast(void**)&_SDL_strtol, "SDL_strtol");
	lib.bindSymbol(cast(void**)&_SDL_strtoul, "SDL_strtoul");
	lib.bindSymbol(cast(void**)&_SDL_strtoll, "SDL_strtoll");
	lib.bindSymbol(cast(void**)&_SDL_strtoull, "SDL_strtoull");
	lib.bindSymbol(cast(void**)&_SDL_strtod, "SDL_strtod");
	lib.bindSymbol(cast(void**)&_SDL_strcmp, "SDL_strcmp");
	lib.bindSymbol(cast(void**)&_SDL_strncmp, "SDL_strncmp");
	lib.bindSymbol(cast(void**)&_SDL_strcasecmp, "SDL_strcasecmp");
	lib.bindSymbol(cast(void**)&_SDL_strncasecmp, "SDL_strncasecmp");
	lib.bindSymbol(cast(void**)&_SDL_sscanf, "SDL_sscanf");
	lib.bindSymbol(cast(void**)&_SDL_snprintf, "SDL_snprintf");
	lib.bindSymbol(cast(void**)&_SDL_atan, "SDL_atan");
	lib.bindSymbol(cast(void**)&_SDL_atan2, "SDL_atan2");
	lib.bindSymbol(cast(void**)&_SDL_ceil, "SDL_ceil");
	lib.bindSymbol(cast(void**)&_SDL_copysign, "SDL_copysign");
	lib.bindSymbol(cast(void**)&_SDL_cos, "SDL_cos");
	lib.bindSymbol(cast(void**)&_SDL_cosf, "SDL_cosf");
	lib.bindSymbol(cast(void**)&_SDL_fabs, "SDL_fabs");
	lib.bindSymbol(cast(void**)&_SDL_floor, "SDL_floor");
	lib.bindSymbol(cast(void**)&_SDL_log, "SDL_log");
	lib.bindSymbol(cast(void**)&_SDL_pow, "SDL_pow");
	lib.bindSymbol(cast(void**)&_SDL_scalbn, "SDL_scalbn");
	lib.bindSymbol(cast(void**)&_SDL_sin, "SDL_sin");
	lib.bindSymbol(cast(void**)&_SDL_sinf, "SDL_sinf");
	lib.bindSymbol(cast(void**)&_SDL_sqrt, "SDL_sqrt");
	lib.bindSymbol(cast(void**)&_SDL_iconv_open, "SDL_iconv_open");
	lib.bindSymbol(cast(void**)&_SDL_iconv_close, "SDL_iconv_close");
	lib.bindSymbol(cast(void**)&_SDL_iconv, "SDL_iconv");
	lib.bindSymbol(cast(void**)&_SDL_iconv_string, "SDL_iconv_string");
	lib.bindSymbol(cast(void**)&_SDL_vsnprintf, "SDL_vsnprintf");
}

// expansion at source/sdl/atomic.d(153,1)
extern(C) @nogc nothrow __gshared{
	private SDL_bool function(SDL_SpinLock* lock) _SDL_AtomicTryLock;
	SDL_bool SDL_AtomicTryLock(SDL_SpinLock* lock){ return _SDL_AtomicTryLock(__traits(parameters)); }
	private void function(SDL_SpinLock* lock) _SDL_AtomicLock;
	void SDL_AtomicLock(SDL_SpinLock* lock){ _SDL_AtomicLock(__traits(parameters)); }
	private void function(SDL_SpinLock* lock) _SDL_AtomicUnlock;
	void SDL_AtomicUnlock(SDL_SpinLock* lock){ _SDL_AtomicUnlock(__traits(parameters)); }
	private SDL_bool function(SDL_atomic_t* a, int oldval, int newval) _SDL_AtomicCAS;
	SDL_bool SDL_AtomicCAS(SDL_atomic_t* a, int oldval, int newval){ return _SDL_AtomicCAS(__traits(parameters)); }
	private SDL_bool function(void** a, void* oldval, void* newval) _SDL_AtomicCASPtr;
	SDL_bool SDL_AtomicCASPtr(void** a, void* oldval, void* newval){ return _SDL_AtomicCASPtr(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_AtomicTryLock, "SDL_AtomicTryLock");
	lib.bindSymbol(cast(void**)&_SDL_AtomicLock, "SDL_AtomicLock");
	lib.bindSymbol(cast(void**)&_SDL_AtomicUnlock, "SDL_AtomicUnlock");
	lib.bindSymbol(cast(void**)&_SDL_AtomicCAS, "SDL_AtomicCAS");
	lib.bindSymbol(cast(void**)&_SDL_AtomicCASPtr, "SDL_AtomicCASPtr");
}

// expansion at source/sdl/rwops.d(106,1)
extern(C) @nogc nothrow __gshared{
	private SDL_RWops* function(const(char)* file, const(char)* mode) _SDL_RWFromFile;
	SDL_RWops* SDL_RWFromFile(const(char)* file, const(char)* mode){ return _SDL_RWFromFile(__traits(parameters)); }
	private SDL_RWops* function(void* mem, int size) _SDL_RWFromMem;
	SDL_RWops* SDL_RWFromMem(void* mem, int size){ return _SDL_RWFromMem(__traits(parameters)); }
	private SDL_RWops* function(const(void)* mem, int size) _SDL_RWFromConstMem;
	SDL_RWops* SDL_RWFromConstMem(const(void)* mem, int size){ return _SDL_RWFromConstMem(__traits(parameters)); }
	private SDL_RWops* function() _SDL_AllocRW;
	SDL_RWops* SDL_AllocRW(){ return _SDL_AllocRW(__traits(parameters)); }
	private void function(SDL_RWops* context) _SDL_FreeRW;
	void SDL_FreeRW(SDL_RWops* context){ _SDL_FreeRW(__traits(parameters)); }
	private ubyte function(SDL_RWops* context) _SDL_ReadU8;
	ubyte SDL_ReadU8(SDL_RWops* context){ return _SDL_ReadU8(__traits(parameters)); }
	private ushort function(SDL_RWops* context) _SDL_ReadLE16;
	ushort SDL_ReadLE16(SDL_RWops* context){ return _SDL_ReadLE16(__traits(parameters)); }
	private ushort function(SDL_RWops* context) _SDL_ReadBE16;
	ushort SDL_ReadBE16(SDL_RWops* context){ return _SDL_ReadBE16(__traits(parameters)); }
	private uint function(SDL_RWops* context) _SDL_ReadLE32;
	uint SDL_ReadLE32(SDL_RWops* context){ return _SDL_ReadLE32(__traits(parameters)); }
	private uint function(SDL_RWops* context) _SDL_ReadBE32;
	uint SDL_ReadBE32(SDL_RWops* context){ return _SDL_ReadBE32(__traits(parameters)); }
	private ulong function(SDL_RWops* context) _SDL_ReadLE64;
	ulong SDL_ReadLE64(SDL_RWops* context){ return _SDL_ReadLE64(__traits(parameters)); }
	private ulong function(SDL_RWops* context) _SDL_ReadBE64;
	ulong SDL_ReadBE64(SDL_RWops* context){ return _SDL_ReadBE64(__traits(parameters)); }
	private size_t function(SDL_RWops* context, ubyte value) _SDL_WriteU8;
	size_t SDL_WriteU8(SDL_RWops* context, ubyte value){ return _SDL_WriteU8(__traits(parameters)); }
	private size_t function(SDL_RWops* context, ushort value) _SDL_WriteLE16;
	size_t SDL_WriteLE16(SDL_RWops* context, ushort value){ return _SDL_WriteLE16(__traits(parameters)); }
	private size_t function(SDL_RWops* context, ushort value) _SDL_WriteBE16;
	size_t SDL_WriteBE16(SDL_RWops* context, ushort value){ return _SDL_WriteBE16(__traits(parameters)); }
	private size_t function(SDL_RWops* context, uint value) _SDL_WriteLE32;
	size_t SDL_WriteLE32(SDL_RWops* context, uint value){ return _SDL_WriteLE32(__traits(parameters)); }
	private size_t function(SDL_RWops* context, uint value) _SDL_WriteBE32;
	size_t SDL_WriteBE32(SDL_RWops* context, uint value){ return _SDL_WriteBE32(__traits(parameters)); }
	private size_t function(SDL_RWops* context, ulong value) _SDL_WriteLE64;
	size_t SDL_WriteLE64(SDL_RWops* context, ulong value){ return _SDL_WriteLE64(__traits(parameters)); }
	private size_t function(SDL_RWops* context, ulong value) _SDL_WriteBE64;
	size_t SDL_WriteBE64(SDL_RWops* context, ulong value){ return _SDL_WriteBE64(__traits(parameters)); }
	private SDL_RWops* function(FILE* ffp, SDL_bool autoclose) _SDL_RWFromFP;
	SDL_RWops* SDL_RWFromFP(FILE* ffp, SDL_bool autoclose){ return _SDL_RWFromFP(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_RWFromFile, "SDL_RWFromFile");
	lib.bindSymbol(cast(void**)&_SDL_RWFromMem, "SDL_RWFromMem");
	lib.bindSymbol(cast(void**)&_SDL_RWFromConstMem, "SDL_RWFromConstMem");
	lib.bindSymbol(cast(void**)&_SDL_AllocRW, "SDL_AllocRW");
	lib.bindSymbol(cast(void**)&_SDL_FreeRW, "SDL_FreeRW");
	lib.bindSymbol(cast(void**)&_SDL_ReadU8, "SDL_ReadU8");
	lib.bindSymbol(cast(void**)&_SDL_ReadLE16, "SDL_ReadLE16");
	lib.bindSymbol(cast(void**)&_SDL_ReadBE16, "SDL_ReadBE16");
	lib.bindSymbol(cast(void**)&_SDL_ReadLE32, "SDL_ReadLE32");
	lib.bindSymbol(cast(void**)&_SDL_ReadBE32, "SDL_ReadBE32");
	lib.bindSymbol(cast(void**)&_SDL_ReadLE64, "SDL_ReadLE64");
	lib.bindSymbol(cast(void**)&_SDL_ReadBE64, "SDL_ReadBE64");
	lib.bindSymbol(cast(void**)&_SDL_WriteU8, "SDL_WriteU8");
	lib.bindSymbol(cast(void**)&_SDL_WriteLE16, "SDL_WriteLE16");
	lib.bindSymbol(cast(void**)&_SDL_WriteBE16, "SDL_WriteBE16");
	lib.bindSymbol(cast(void**)&_SDL_WriteLE32, "SDL_WriteLE32");
	lib.bindSymbol(cast(void**)&_SDL_WriteBE32, "SDL_WriteBE32");
	lib.bindSymbol(cast(void**)&_SDL_WriteLE64, "SDL_WriteLE64");
	lib.bindSymbol(cast(void**)&_SDL_WriteBE64, "SDL_WriteBE64");
	lib.bindSymbol(cast(void**)&_SDL_RWFromFP, "SDL_RWFromFP");
}

// expansion at source/sdl/audio.d(142,1)
extern(C) @nogc nothrow __gshared{
	private int function() _SDL_GetNumAudioDrivers;
	int SDL_GetNumAudioDrivers(){ return _SDL_GetNumAudioDrivers(__traits(parameters)); }
	private const(char)* function(int index) _SDL_GetAudioDriver;
	const(char)* SDL_GetAudioDriver(int index){ return _SDL_GetAudioDriver(__traits(parameters)); }
	private int function(const(char)* driver_name) _SDL_AudioInit;
	int SDL_AudioInit(const(char)* driver_name){ return _SDL_AudioInit(__traits(parameters)); }
	private void function() _SDL_AudioQuit;
	void SDL_AudioQuit(){ _SDL_AudioQuit(__traits(parameters)); }
	private const(char)* function() _SDL_GetCurrentAudioDriver;
	const(char)* SDL_GetCurrentAudioDriver(){ return _SDL_GetCurrentAudioDriver(__traits(parameters)); }
	private int function(SDL_AudioSpec* desired, SDL_AudioSpec* obtained) _SDL_OpenAudio;
	int SDL_OpenAudio(SDL_AudioSpec* desired, SDL_AudioSpec* obtained){ return _SDL_OpenAudio(__traits(parameters)); }
	private int function(int iscapture) _SDL_GetNumAudioDevices;
	int SDL_GetNumAudioDevices(int iscapture){ return _SDL_GetNumAudioDevices(__traits(parameters)); }
	private const(char)* function(int index, int iscapture) _SDL_GetAudioDeviceName;
	const(char)* SDL_GetAudioDeviceName(int index, int iscapture){ return _SDL_GetAudioDeviceName(__traits(parameters)); }
	private SDL_AudioDeviceID function(const(char)* device, int iscapture, const(SDL_AudioSpec)* desired, SDL_AudioSpec* obtained, int allowed_changes) _SDL_OpenAudioDevice;
	SDL_AudioDeviceID SDL_OpenAudioDevice(const(char)* device, int iscapture, const(SDL_AudioSpec)* desired, SDL_AudioSpec* obtained, int allowed_changes){ return _SDL_OpenAudioDevice(__traits(parameters)); }
	private SDL_AudioStatus function() _SDL_GetAudioStatus;
	SDL_AudioStatus SDL_GetAudioStatus(){ return _SDL_GetAudioStatus(__traits(parameters)); }
	private SDL_AudioStatus function(SDL_AudioDeviceID dev) _SDL_GetAudioDeviceStatus;
	SDL_AudioStatus SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev){ return _SDL_GetAudioDeviceStatus(__traits(parameters)); }
	private void function(int pause_on) _SDL_PauseAudio;
	void SDL_PauseAudio(int pause_on){ _SDL_PauseAudio(__traits(parameters)); }
	private void function(SDL_AudioDeviceID dev, int pause_on) _SDL_PauseAudioDevice;
	void SDL_PauseAudioDevice(SDL_AudioDeviceID dev, int pause_on){ _SDL_PauseAudioDevice(__traits(parameters)); }
	private SDL_AudioSpec* function(SDL_RWops* src, int freesrc, SDL_AudioSpec* spec, ubyte** audio_buf, uint* audio_len) _SDL_LoadWAV_RW;
	SDL_AudioSpec* SDL_LoadWAV_RW(SDL_RWops* src, int freesrc, SDL_AudioSpec* spec, ubyte** audio_buf, uint* audio_len){ return _SDL_LoadWAV_RW(__traits(parameters)); }
	private void function(ubyte* audio_buf) _SDL_FreeWAV;
	void SDL_FreeWAV(ubyte* audio_buf){ _SDL_FreeWAV(__traits(parameters)); }
	private int function(SDL_AudioCVT* cvt, SDL_AudioFormat src_format, ubyte src_channels, int src_rate, SDL_AudioFormat dst_format, ubyte dst_channels, int dst_rate) _SDL_BuildAudioCVT;
	int SDL_BuildAudioCVT(SDL_AudioCVT* cvt, SDL_AudioFormat src_format, ubyte src_channels, int src_rate, SDL_AudioFormat dst_format, ubyte dst_channels, int dst_rate){ return _SDL_BuildAudioCVT(__traits(parameters)); }
	private int function(SDL_AudioCVT* cvt) _SDL_ConvertAudio;
	int SDL_ConvertAudio(SDL_AudioCVT* cvt){ return _SDL_ConvertAudio(__traits(parameters)); }
	private void function(ubyte* dst, const(ubyte)* src, uint len, int volume) _SDL_MixAudio;
	void SDL_MixAudio(ubyte* dst, const(ubyte)* src, uint len, int volume){ _SDL_MixAudio(__traits(parameters)); }
	private void function(ubyte* dst, const(ubyte)* src, SDL_AudioFormat format, uint len, int volume) _SDL_MixAudioFormat;
	void SDL_MixAudioFormat(ubyte* dst, const(ubyte)* src, SDL_AudioFormat format, uint len, int volume){ _SDL_MixAudioFormat(__traits(parameters)); }
	private void function() _SDL_LockAudio;
	void SDL_LockAudio(){ _SDL_LockAudio(__traits(parameters)); }
	private void function(SDL_AudioDeviceID dev) _SDL_LockAudioDevice;
	void SDL_LockAudioDevice(SDL_AudioDeviceID dev){ _SDL_LockAudioDevice(__traits(parameters)); }
	private void function() _SDL_UnlockAudio;
	void SDL_UnlockAudio(){ _SDL_UnlockAudio(__traits(parameters)); }
	private void function(SDL_AudioDeviceID dev) _SDL_UnlockAudioDevice;
	void SDL_UnlockAudioDevice(SDL_AudioDeviceID dev){ _SDL_UnlockAudioDevice(__traits(parameters)); }
	private void function() _SDL_CloseAudio;
	void SDL_CloseAudio(){ _SDL_CloseAudio(__traits(parameters)); }
	private void function(SDL_AudioDeviceID dev) _SDL_CloseAudioDevice;
	void SDL_CloseAudioDevice(SDL_AudioDeviceID dev){ _SDL_CloseAudioDevice(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetNumAudioDrivers, "SDL_GetNumAudioDrivers");
	lib.bindSymbol(cast(void**)&_SDL_GetAudioDriver, "SDL_GetAudioDriver");
	lib.bindSymbol(cast(void**)&_SDL_AudioInit, "SDL_AudioInit");
	lib.bindSymbol(cast(void**)&_SDL_AudioQuit, "SDL_AudioQuit");
	lib.bindSymbol(cast(void**)&_SDL_GetCurrentAudioDriver, "SDL_GetCurrentAudioDriver");
	lib.bindSymbol(cast(void**)&_SDL_OpenAudio, "SDL_OpenAudio");
	lib.bindSymbol(cast(void**)&_SDL_GetNumAudioDevices, "SDL_GetNumAudioDevices");
	lib.bindSymbol(cast(void**)&_SDL_GetAudioDeviceName, "SDL_GetAudioDeviceName");
	lib.bindSymbol(cast(void**)&_SDL_OpenAudioDevice, "SDL_OpenAudioDevice");
	lib.bindSymbol(cast(void**)&_SDL_GetAudioStatus, "SDL_GetAudioStatus");
	lib.bindSymbol(cast(void**)&_SDL_GetAudioDeviceStatus, "SDL_GetAudioDeviceStatus");
	lib.bindSymbol(cast(void**)&_SDL_PauseAudio, "SDL_PauseAudio");
	lib.bindSymbol(cast(void**)&_SDL_PauseAudioDevice, "SDL_PauseAudioDevice");
	lib.bindSymbol(cast(void**)&_SDL_LoadWAV_RW, "SDL_LoadWAV_RW");
	lib.bindSymbol(cast(void**)&_SDL_FreeWAV, "SDL_FreeWAV");
	lib.bindSymbol(cast(void**)&_SDL_BuildAudioCVT, "SDL_BuildAudioCVT");
	lib.bindSymbol(cast(void**)&_SDL_ConvertAudio, "SDL_ConvertAudio");
	lib.bindSymbol(cast(void**)&_SDL_MixAudio, "SDL_MixAudio");
	lib.bindSymbol(cast(void**)&_SDL_MixAudioFormat, "SDL_MixAudioFormat");
	lib.bindSymbol(cast(void**)&_SDL_LockAudio, "SDL_LockAudio");
	lib.bindSymbol(cast(void**)&_SDL_LockAudioDevice, "SDL_LockAudioDevice");
	lib.bindSymbol(cast(void**)&_SDL_UnlockAudio, "SDL_UnlockAudio");
	lib.bindSymbol(cast(void**)&_SDL_UnlockAudioDevice, "SDL_UnlockAudioDevice");
	lib.bindSymbol(cast(void**)&_SDL_CloseAudio, "SDL_CloseAudio");
	lib.bindSymbol(cast(void**)&_SDL_CloseAudioDevice, "SDL_CloseAudioDevice");
}

// expansion at source/sdl/bits.d(38,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/blendmode.d(55,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/clipboard.d(15,1)
extern(C) @nogc nothrow __gshared{
	private int function(const(char)* text) _SDL_SetClipboardText;
	int SDL_SetClipboardText(const(char)* text){ return _SDL_SetClipboardText(__traits(parameters)); }
	private char* function() _SDL_GetClipboardText;
	char* SDL_GetClipboardText(){ return _SDL_GetClipboardText(__traits(parameters)); }
	private SDL_bool function() _SDL_HasClipboardText;
	SDL_bool SDL_HasClipboardText(){ return _SDL_HasClipboardText(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_SetClipboardText, "SDL_SetClipboardText");
	lib.bindSymbol(cast(void**)&_SDL_GetClipboardText, "SDL_GetClipboardText");
	lib.bindSymbol(cast(void**)&_SDL_HasClipboardText, "SDL_HasClipboardText");
}

// expansion at source/sdl/cpuinfo.d(17,1)
extern(C) @nogc nothrow __gshared{
	private int function() _SDL_GetCPUCount;
	int SDL_GetCPUCount(){ return _SDL_GetCPUCount(__traits(parameters)); }
	private int function() _SDL_GetCPUCacheLineSize;
	int SDL_GetCPUCacheLineSize(){ return _SDL_GetCPUCacheLineSize(__traits(parameters)); }
	private SDL_bool function() _SDL_HasRDTSC;
	SDL_bool SDL_HasRDTSC(){ return _SDL_HasRDTSC(__traits(parameters)); }
	private SDL_bool function() _SDL_HasAltiVec;
	SDL_bool SDL_HasAltiVec(){ return _SDL_HasAltiVec(__traits(parameters)); }
	private SDL_bool function() _SDL_HasMMX;
	SDL_bool SDL_HasMMX(){ return _SDL_HasMMX(__traits(parameters)); }
	private SDL_bool function() _SDL_Has3DNow;
	SDL_bool SDL_Has3DNow(){ return _SDL_Has3DNow(__traits(parameters)); }
	private SDL_bool function() _SDL_HasSSE;
	SDL_bool SDL_HasSSE(){ return _SDL_HasSSE(__traits(parameters)); }
	private SDL_bool function() _SDL_HasSSE2;
	SDL_bool SDL_HasSSE2(){ return _SDL_HasSSE2(__traits(parameters)); }
	private SDL_bool function() _SDL_HasSSE3;
	SDL_bool SDL_HasSSE3(){ return _SDL_HasSSE3(__traits(parameters)); }
	private SDL_bool function() _SDL_HasSSE41;
	SDL_bool SDL_HasSSE41(){ return _SDL_HasSSE41(__traits(parameters)); }
	private SDL_bool function() _SDL_HasSSE42;
	SDL_bool SDL_HasSSE42(){ return _SDL_HasSSE42(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetCPUCount, "SDL_GetCPUCount");
	lib.bindSymbol(cast(void**)&_SDL_GetCPUCacheLineSize, "SDL_GetCPUCacheLineSize");
	lib.bindSymbol(cast(void**)&_SDL_HasRDTSC, "SDL_HasRDTSC");
	lib.bindSymbol(cast(void**)&_SDL_HasAltiVec, "SDL_HasAltiVec");
	lib.bindSymbol(cast(void**)&_SDL_HasMMX, "SDL_HasMMX");
	lib.bindSymbol(cast(void**)&_SDL_Has3DNow, "SDL_Has3DNow");
	lib.bindSymbol(cast(void**)&_SDL_HasSSE, "SDL_HasSSE");
	lib.bindSymbol(cast(void**)&_SDL_HasSSE2, "SDL_HasSSE2");
	lib.bindSymbol(cast(void**)&_SDL_HasSSE3, "SDL_HasSSE3");
	lib.bindSymbol(cast(void**)&_SDL_HasSSE41, "SDL_HasSSE41");
	lib.bindSymbol(cast(void**)&_SDL_HasSSE42, "SDL_HasSSE42");
}

// expansion at source/sdl/endian.d(69,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/error.d(29,1)
extern(C) @nogc nothrow __gshared{
	private void function(const(char)* fmt, ...) _SDL_SetError;
	void SDL_SetError(const(char)* fmt, ...){ _SDL_SetError(__traits(parameters)); }
	private const(char)* function() _SDL_GetError;
	const(char)* SDL_GetError(){ return _SDL_GetError(__traits(parameters)); }
	private void function() _SDL_ClearError;
	void SDL_ClearError(){ _SDL_ClearError(__traits(parameters)); }
	private int function(SDL_errorcode code) _SDL_Error;
	int SDL_Error(SDL_errorcode code){ return _SDL_Error(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_SetError, "SDL_SetError");
	lib.bindSymbol(cast(void**)&_SDL_GetError, "SDL_GetError");
	lib.bindSymbol(cast(void**)&_SDL_ClearError, "SDL_ClearError");
	lib.bindSymbol(cast(void**)&_SDL_Error, "SDL_Error");
}

// expansion at source/sdl/touch.d(37,1)
extern(C) @nogc nothrow __gshared{
	private int function() _SDL_GetNumTouchDevices;
	int SDL_GetNumTouchDevices(){ return _SDL_GetNumTouchDevices(__traits(parameters)); }
	private SDL_TouchID function(int index) _SDL_GetTouchDevice;
	SDL_TouchID SDL_GetTouchDevice(int index){ return _SDL_GetTouchDevice(__traits(parameters)); }
	private int function(SDL_TouchID touchID) _SDL_GetNumTouchFingers;
	int SDL_GetNumTouchFingers(SDL_TouchID touchID){ return _SDL_GetNumTouchFingers(__traits(parameters)); }
	private SDL_Finger* function(SDL_TouchID touchID, int index) _SDL_GetTouchFinger;
	SDL_Finger* SDL_GetTouchFinger(SDL_TouchID touchID, int index){ return _SDL_GetTouchFinger(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetNumTouchDevices, "SDL_GetNumTouchDevices");
	lib.bindSymbol(cast(void**)&_SDL_GetTouchDevice, "SDL_GetTouchDevice");
	lib.bindSymbol(cast(void**)&_SDL_GetNumTouchFingers, "SDL_GetNumTouchFingers");
	lib.bindSymbol(cast(void**)&_SDL_GetTouchFinger, "SDL_GetTouchFinger");
}

// expansion at source/sdl/gesture.d(18,1)
extern(C) @nogc nothrow __gshared{
	private int function(SDL_TouchID touchId) _SDL_RecordGesture;
	int SDL_RecordGesture(SDL_TouchID touchId){ return _SDL_RecordGesture(__traits(parameters)); }
	private int function(SDL_RWops* dst) _SDL_SaveAllDollarTemplates;
	int SDL_SaveAllDollarTemplates(SDL_RWops* dst){ return _SDL_SaveAllDollarTemplates(__traits(parameters)); }
	private int function(SDL_GestureID gestureId, SDL_RWops* dst) _SDL_SaveDollarTemplate;
	int SDL_SaveDollarTemplate(SDL_GestureID gestureId, SDL_RWops* dst){ return _SDL_SaveDollarTemplate(__traits(parameters)); }
	private int function(SDL_TouchID touchId,SDL_RWops* src) _SDL_LoadDollarTemplates;
	int SDL_LoadDollarTemplates(SDL_TouchID touchId,SDL_RWops* src){ return _SDL_LoadDollarTemplates(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_RecordGesture, "SDL_RecordGesture");
	lib.bindSymbol(cast(void**)&_SDL_SaveAllDollarTemplates, "SDL_SaveAllDollarTemplates");
	lib.bindSymbol(cast(void**)&_SDL_SaveDollarTemplate, "SDL_SaveDollarTemplate");
	lib.bindSymbol(cast(void**)&_SDL_LoadDollarTemplates, "SDL_LoadDollarTemplates");
}

// expansion at source/sdl/guid.d(16,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/joystick.d(98,1)
extern(C) @nogc nothrow __gshared{
	private int function() _SDL_NumJoysticks;
	int SDL_NumJoysticks(){ return _SDL_NumJoysticks(__traits(parameters)); }
	private const(char)* function(int device_index) _SDL_JoystickNameForIndex;
	const(char)* SDL_JoystickNameForIndex(int device_index){ return _SDL_JoystickNameForIndex(__traits(parameters)); }
	private SDL_JoystickGUID function(int device_index) _SDL_JoystickGetDeviceGUID;
	SDL_JoystickGUID SDL_JoystickGetDeviceGUID(int device_index){ return _SDL_JoystickGetDeviceGUID(__traits(parameters)); }
	private SDL_Joystick* function(int device_index) _SDL_JoystickOpen;
	SDL_Joystick* SDL_JoystickOpen(int device_index){ return _SDL_JoystickOpen(__traits(parameters)); }
	private const(char)* function(SDL_Joystick* joystick) _SDL_JoystickName;
	const(char)* SDL_JoystickName(SDL_Joystick* joystick){ return _SDL_JoystickName(__traits(parameters)); }
	private SDL_JoystickGUID function(SDL_Joystick* joystick) _SDL_JoystickGetGUID;
	SDL_JoystickGUID SDL_JoystickGetGUID(SDL_Joystick* joystick){ return _SDL_JoystickGetGUID(__traits(parameters)); }
	private void function(SDL_JoystickGUID guid, char* pszGUID, int cbGUID) _SDL_JoystickGetGUIDString;
	void SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, char* pszGUID, int cbGUID){ _SDL_JoystickGetGUIDString(__traits(parameters)); }
	private SDL_JoystickGUID function(const(char)* ) _SDL_JoystickGetGUIDFromString;
	SDL_JoystickGUID SDL_JoystickGetGUIDFromString(const(char)* ){ return _SDL_JoystickGetGUIDFromString(__traits(parameters)); }
	private SDL_bool function(SDL_Joystick* joystick) _SDL_JoystickGetAttached;
	SDL_bool SDL_JoystickGetAttached(SDL_Joystick* joystick){ return _SDL_JoystickGetAttached(__traits(parameters)); }
	private SDL_JoystickID function(SDL_Joystick* joystick) _SDL_JoystickInstanceID;
	SDL_JoystickID SDL_JoystickInstanceID(SDL_Joystick* joystick){ return _SDL_JoystickInstanceID(__traits(parameters)); }
	private int function(SDL_Joystick* joystick) _SDL_JoystickNumAxes;
	int SDL_JoystickNumAxes(SDL_Joystick* joystick){ return _SDL_JoystickNumAxes(__traits(parameters)); }
	private int function(SDL_Joystick* joystick) _SDL_JoystickNumBalls;
	int SDL_JoystickNumBalls(SDL_Joystick* joystick){ return _SDL_JoystickNumBalls(__traits(parameters)); }
	private int function(SDL_Joystick* joystick) _SDL_JoystickNumHats;
	int SDL_JoystickNumHats(SDL_Joystick* joystick){ return _SDL_JoystickNumHats(__traits(parameters)); }
	private int function(SDL_Joystick* joystick) _SDL_JoystickNumButtons;
	int SDL_JoystickNumButtons(SDL_Joystick* joystick){ return _SDL_JoystickNumButtons(__traits(parameters)); }
	private void function() _SDL_JoystickUpdate;
	void SDL_JoystickUpdate(){ _SDL_JoystickUpdate(__traits(parameters)); }
	private int function(int state) _SDL_JoystickEventState;
	int SDL_JoystickEventState(int state){ return _SDL_JoystickEventState(__traits(parameters)); }
	private short function(SDL_Joystick* joystick, int axis) _SDL_JoystickGetAxis;
	short SDL_JoystickGetAxis(SDL_Joystick* joystick, int axis){ return _SDL_JoystickGetAxis(__traits(parameters)); }
	private ubyte function(SDL_Joystick* joystick, int hat) _SDL_JoystickGetHat;
	ubyte SDL_JoystickGetHat(SDL_Joystick* joystick, int hat){ return _SDL_JoystickGetHat(__traits(parameters)); }
	private int function(SDL_Joystick* joystick, int ball, int* dx, int* dy) _SDL_JoystickGetBall;
	int SDL_JoystickGetBall(SDL_Joystick* joystick, int ball, int* dx, int* dy){ return _SDL_JoystickGetBall(__traits(parameters)); }
	private ubyte function(SDL_Joystick* joystick, int button) _SDL_JoystickGetButton;
	ubyte SDL_JoystickGetButton(SDL_Joystick* joystick, int button){ return _SDL_JoystickGetButton(__traits(parameters)); }
	private void function(SDL_Joystick* joystick) _SDL_JoystickClose;
	void SDL_JoystickClose(SDL_Joystick* joystick){ _SDL_JoystickClose(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_NumJoysticks, "SDL_NumJoysticks");
	lib.bindSymbol(cast(void**)&_SDL_JoystickNameForIndex, "SDL_JoystickNameForIndex");
	lib.bindSymbol(cast(void**)&_SDL_JoystickGetDeviceGUID, "SDL_JoystickGetDeviceGUID");
	lib.bindSymbol(cast(void**)&_SDL_JoystickOpen, "SDL_JoystickOpen");
	lib.bindSymbol(cast(void**)&_SDL_JoystickName, "SDL_JoystickName");
	lib.bindSymbol(cast(void**)&_SDL_JoystickGetGUID, "SDL_JoystickGetGUID");
	lib.bindSymbol(cast(void**)&_SDL_JoystickGetGUIDString, "SDL_JoystickGetGUIDString");
	lib.bindSymbol(cast(void**)&_SDL_JoystickGetGUIDFromString, "SDL_JoystickGetGUIDFromString");
	lib.bindSymbol(cast(void**)&_SDL_JoystickGetAttached, "SDL_JoystickGetAttached");
	lib.bindSymbol(cast(void**)&_SDL_JoystickInstanceID, "SDL_JoystickInstanceID");
	lib.bindSymbol(cast(void**)&_SDL_JoystickNumAxes, "SDL_JoystickNumAxes");
	lib.bindSymbol(cast(void**)&_SDL_JoystickNumBalls, "SDL_JoystickNumBalls");
	lib.bindSymbol(cast(void**)&_SDL_JoystickNumHats, "SDL_JoystickNumHats");
	lib.bindSymbol(cast(void**)&_SDL_JoystickNumButtons, "SDL_JoystickNumButtons");
	lib.bindSymbol(cast(void**)&_SDL_JoystickUpdate, "SDL_JoystickUpdate");
	lib.bindSymbol(cast(void**)&_SDL_JoystickEventState, "SDL_JoystickEventState");
	lib.bindSymbol(cast(void**)&_SDL_JoystickGetAxis, "SDL_JoystickGetAxis");
	lib.bindSymbol(cast(void**)&_SDL_JoystickGetHat, "SDL_JoystickGetHat");
	lib.bindSymbol(cast(void**)&_SDL_JoystickGetBall, "SDL_JoystickGetBall");
	lib.bindSymbol(cast(void**)&_SDL_JoystickGetButton, "SDL_JoystickGetButton");
	lib.bindSymbol(cast(void**)&_SDL_JoystickClose, "SDL_JoystickClose");
}

// expansion at source/sdl/scancode.d(289,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/keycode.d(315,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/rect.d(74,1)
extern(C) @nogc nothrow __gshared{
	private SDL_bool function(const(SDL_Rect)* A, const(SDL_Rect)* B) _SDL_HasIntersection;
	SDL_bool SDL_HasIntersection(const(SDL_Rect)* A, const(SDL_Rect)* B){ return _SDL_HasIntersection(__traits(parameters)); }
	private SDL_bool function(const(SDL_Rect)* A, const(SDL_Rect)* B,SDL_Rect* result) _SDL_IntersectRect;
	SDL_bool SDL_IntersectRect(const(SDL_Rect)* A, const(SDL_Rect)* B,SDL_Rect* result){ return _SDL_IntersectRect(__traits(parameters)); }
	private void function(const(SDL_Rect)* A, const(SDL_Rect)* B, SDL_Rect* result) _SDL_UnionRect;
	void SDL_UnionRect(const(SDL_Rect)* A, const(SDL_Rect)* B, SDL_Rect* result){ _SDL_UnionRect(__traits(parameters)); }
	private SDL_bool function(const(SDL_Point)* points, int count, const(SDL_Rect)* clip, SDL_Rect* result) _SDL_EnclosePoints;
	SDL_bool SDL_EnclosePoints(const(SDL_Point)* points, int count, const(SDL_Rect)* clip, SDL_Rect* result){ return _SDL_EnclosePoints(__traits(parameters)); }
	private SDL_bool function(const(SDL_Rect)* rect, int* X1, int* Y1, int* X2, int* Y2) _SDL_IntersectRectAndLine;
	SDL_bool SDL_IntersectRectAndLine(const(SDL_Rect)* rect, int* X1, int* Y1, int* X2, int* Y2){ return _SDL_IntersectRectAndLine(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_HasIntersection, "SDL_HasIntersection");
	lib.bindSymbol(cast(void**)&_SDL_IntersectRect, "SDL_IntersectRect");
	lib.bindSymbol(cast(void**)&_SDL_UnionRect, "SDL_UnionRect");
	lib.bindSymbol(cast(void**)&_SDL_EnclosePoints, "SDL_EnclosePoints");
	lib.bindSymbol(cast(void**)&_SDL_IntersectRectAndLine, "SDL_IntersectRectAndLine");
}

// expansion at source/sdl/pixels.d(327,1)
extern(C) @nogc nothrow __gshared{
	private const(char)* function(uint format) _SDL_GetPixelFormatName;
	const(char)* SDL_GetPixelFormatName(uint format){ return _SDL_GetPixelFormatName(__traits(parameters)); }
	private SDL_bool function(uint format, int* bpp, uint* Rmask, uint* Gmask, uint* Bmask, uint* Amask) _SDL_PixelFormatEnumToMasks;
	SDL_bool SDL_PixelFormatEnumToMasks(uint format, int* bpp, uint* Rmask, uint* Gmask, uint* Bmask, uint* Amask){ return _SDL_PixelFormatEnumToMasks(__traits(parameters)); }
	private uint function(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask) _SDL_MasksToPixelFormatEnum;
	uint SDL_MasksToPixelFormatEnum(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask){ return _SDL_MasksToPixelFormatEnum(__traits(parameters)); }
	private SDL_PixelFormat* function(uint pixel_format) _SDL_AllocFormat;
	SDL_PixelFormat* SDL_AllocFormat(uint pixel_format){ return _SDL_AllocFormat(__traits(parameters)); }
	private void function(SDL_PixelFormat* format) _SDL_FreeFormat;
	void SDL_FreeFormat(SDL_PixelFormat* format){ _SDL_FreeFormat(__traits(parameters)); }
	private SDL_Palette* function(int ncolors) _SDL_AllocPalette;
	SDL_Palette* SDL_AllocPalette(int ncolors){ return _SDL_AllocPalette(__traits(parameters)); }
	private int function(SDL_PixelFormat* format,SDL_Palette* palette) _SDL_SetPixelFormatPalette;
	int SDL_SetPixelFormatPalette(SDL_PixelFormat* format,SDL_Palette* palette){ return _SDL_SetPixelFormatPalette(__traits(parameters)); }
	private int function(SDL_Palette* palette, const(SDL_Color)* colors, int firstcolor, int ncolors) _SDL_SetPaletteColors;
	int SDL_SetPaletteColors(SDL_Palette* palette, const(SDL_Color)* colors, int firstcolor, int ncolors){ return _SDL_SetPaletteColors(__traits(parameters)); }
	private void function(SDL_Palette* palette) _SDL_FreePalette;
	void SDL_FreePalette(SDL_Palette* palette){ _SDL_FreePalette(__traits(parameters)); }
	private uint function(const(SDL_PixelFormat)* format, ubyte r, ubyte g, ubyte b) _SDL_MapRGB;
	uint SDL_MapRGB(const(SDL_PixelFormat)* format, ubyte r, ubyte g, ubyte b){ return _SDL_MapRGB(__traits(parameters)); }
	private uint function(const(SDL_PixelFormat)* format, ubyte r, ubyte g, ubyte b, ubyte a) _SDL_MapRGBA;
	uint SDL_MapRGBA(const(SDL_PixelFormat)* format, ubyte r, ubyte g, ubyte b, ubyte a){ return _SDL_MapRGBA(__traits(parameters)); }
	private void function(uint pixel, const(SDL_PixelFormat)* format, ubyte* r, ubyte* g, ubyte* b) _SDL_GetRGB;
	void SDL_GetRGB(uint pixel, const(SDL_PixelFormat)* format, ubyte* r, ubyte* g, ubyte* b){ _SDL_GetRGB(__traits(parameters)); }
	private void function(uint pixel, const(SDL_PixelFormat)* format, ubyte* r, ubyte* g, ubyte* b, ubyte* a) _SDL_GetRGBA;
	void SDL_GetRGBA(uint pixel, const(SDL_PixelFormat)* format, ubyte* r, ubyte* g, ubyte* b, ubyte* a){ _SDL_GetRGBA(__traits(parameters)); }
	private void function(float gamma, ushort* ramp) _SDL_CalculateGammaRamp;
	void SDL_CalculateGammaRamp(float gamma, ushort* ramp){ _SDL_CalculateGammaRamp(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetPixelFormatName, "SDL_GetPixelFormatName");
	lib.bindSymbol(cast(void**)&_SDL_PixelFormatEnumToMasks, "SDL_PixelFormatEnumToMasks");
	lib.bindSymbol(cast(void**)&_SDL_MasksToPixelFormatEnum, "SDL_MasksToPixelFormatEnum");
	lib.bindSymbol(cast(void**)&_SDL_AllocFormat, "SDL_AllocFormat");
	lib.bindSymbol(cast(void**)&_SDL_FreeFormat, "SDL_FreeFormat");
	lib.bindSymbol(cast(void**)&_SDL_AllocPalette, "SDL_AllocPalette");
	lib.bindSymbol(cast(void**)&_SDL_SetPixelFormatPalette, "SDL_SetPixelFormatPalette");
	lib.bindSymbol(cast(void**)&_SDL_SetPaletteColors, "SDL_SetPaletteColors");
	lib.bindSymbol(cast(void**)&_SDL_FreePalette, "SDL_FreePalette");
	lib.bindSymbol(cast(void**)&_SDL_MapRGB, "SDL_MapRGB");
	lib.bindSymbol(cast(void**)&_SDL_MapRGBA, "SDL_MapRGBA");
	lib.bindSymbol(cast(void**)&_SDL_GetRGB, "SDL_GetRGB");
	lib.bindSymbol(cast(void**)&_SDL_GetRGBA, "SDL_GetRGBA");
	lib.bindSymbol(cast(void**)&_SDL_CalculateGammaRamp, "SDL_CalculateGammaRamp");
}

// expansion at source/sdl/surface.d(68,1)
extern(C) @nogc nothrow __gshared{
	private SDL_Surface* function(uint flags, int width, int height, int depth, uint Rmask, uint Gmask, uint Bmask, uint Amask) _SDL_CreateRGBSurface;
	SDL_Surface* SDL_CreateRGBSurface(uint flags, int width, int height, int depth, uint Rmask, uint Gmask, uint Bmask, uint Amask){ return _SDL_CreateRGBSurface(__traits(parameters)); }
	private SDL_Surface* function(void* pixels, int width, int height, int depth, int pitch, uint Rmask, uint Gmask, uint Bmask, uint Amask) _SDL_CreateRGBSurfaceFrom;
	SDL_Surface* SDL_CreateRGBSurfaceFrom(void* pixels, int width, int height, int depth, int pitch, uint Rmask, uint Gmask, uint Bmask, uint Amask){ return _SDL_CreateRGBSurfaceFrom(__traits(parameters)); }
	private void function(SDL_Surface* surface) _SDL_FreeSurface;
	void SDL_FreeSurface(SDL_Surface* surface){ _SDL_FreeSurface(__traits(parameters)); }
	private int function(SDL_Surface* surface, SDL_Palette* palette) _SDL_SetSurfacePalette;
	int SDL_SetSurfacePalette(SDL_Surface* surface, SDL_Palette* palette){ return _SDL_SetSurfacePalette(__traits(parameters)); }
	private int function(SDL_Surface* surface) _SDL_LockSurface;
	int SDL_LockSurface(SDL_Surface* surface){ return _SDL_LockSurface(__traits(parameters)); }
	private int function(SDL_Surface* surface) _SDL_UnlockSurface;
	int SDL_UnlockSurface(SDL_Surface* surface){ return _SDL_UnlockSurface(__traits(parameters)); }
	private SDL_Surface* function(SDL_RWops* src, int freesrc) _SDL_LoadBMP_RW;
	SDL_Surface* SDL_LoadBMP_RW(SDL_RWops* src, int freesrc){ return _SDL_LoadBMP_RW(__traits(parameters)); }
	private int function(SDL_Surface* surface, SDL_RWops* dst, int freedst) _SDL_SaveBMP_RW;
	int SDL_SaveBMP_RW(SDL_Surface* surface, SDL_RWops* dst, int freedst){ return _SDL_SaveBMP_RW(__traits(parameters)); }
	private int function(SDL_Surface* surface, int flag) _SDL_SetSurfaceRLE;
	int SDL_SetSurfaceRLE(SDL_Surface* surface, int flag){ return _SDL_SetSurfaceRLE(__traits(parameters)); }
	private int function(SDL_Surface* surface, int flag, uint key) _SDL_SetColorKey;
	int SDL_SetColorKey(SDL_Surface* surface, int flag, uint key){ return _SDL_SetColorKey(__traits(parameters)); }
	private int function(SDL_Surface* surface, uint* key) _SDL_GetColorKey;
	int SDL_GetColorKey(SDL_Surface* surface, uint* key){ return _SDL_GetColorKey(__traits(parameters)); }
	private int function(SDL_Surface* surface, ubyte r, ubyte g, ubyte b) _SDL_SetSurfaceColorMod;
	int SDL_SetSurfaceColorMod(SDL_Surface* surface, ubyte r, ubyte g, ubyte b){ return _SDL_SetSurfaceColorMod(__traits(parameters)); }
	private int function(SDL_Surface* surface, ubyte* r, ubyte* g, ubyte* b) _SDL_GetSurfaceColorMod;
	int SDL_GetSurfaceColorMod(SDL_Surface* surface, ubyte* r, ubyte* g, ubyte* b){ return _SDL_GetSurfaceColorMod(__traits(parameters)); }
	private int function(SDL_Surface* surface, ubyte alpha) _SDL_SetSurfaceAlphaMod;
	int SDL_SetSurfaceAlphaMod(SDL_Surface* surface, ubyte alpha){ return _SDL_SetSurfaceAlphaMod(__traits(parameters)); }
	private int function(SDL_Surface* surface, ubyte* alpha) _SDL_GetSurfaceAlphaMod;
	int SDL_GetSurfaceAlphaMod(SDL_Surface* surface, ubyte* alpha){ return _SDL_GetSurfaceAlphaMod(__traits(parameters)); }
	private int function(SDL_Surface* surface, SDL_BlendMode blendMode) _SDL_SetSurfaceBlendMode;
	int SDL_SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode){ return _SDL_SetSurfaceBlendMode(__traits(parameters)); }
	private int function(SDL_Surface* surface, SDL_BlendMode* blendMode) _SDL_GetSurfaceBlendMode;
	int SDL_GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode){ return _SDL_GetSurfaceBlendMode(__traits(parameters)); }
	private SDL_bool function(SDL_Surface* surface, const(SDL_Rect)* rect) _SDL_SetClipRect;
	SDL_bool SDL_SetClipRect(SDL_Surface* surface, const(SDL_Rect)* rect){ return _SDL_SetClipRect(__traits(parameters)); }
	private void function(SDL_Surface* surface, SDL_Rect* rect) _SDL_GetClipRect;
	void SDL_GetClipRect(SDL_Surface* surface, SDL_Rect* rect){ _SDL_GetClipRect(__traits(parameters)); }
	private SDL_Surface* function(SDL_Surface* surface, const(SDL_PixelFormat)* fmt, uint flags) _SDL_ConvertSurface;
	SDL_Surface* SDL_ConvertSurface(SDL_Surface* surface, const(SDL_PixelFormat)* fmt, uint flags){ return _SDL_ConvertSurface(__traits(parameters)); }
	private SDL_Surface* function(SDL_Surface* surface,uint pixel_format, uint flags) _SDL_ConvertSurfaceFormat;
	SDL_Surface* SDL_ConvertSurfaceFormat(SDL_Surface* surface,uint pixel_format, uint flags){ return _SDL_ConvertSurfaceFormat(__traits(parameters)); }
	private int function(int width, int height, uint src_format, const(void)* src, int src_pitch, uint dst_format, void* dst, int dst_pitch) _SDL_ConvertPixels;
	int SDL_ConvertPixels(int width, int height, uint src_format, const(void)* src, int src_pitch, uint dst_format, void* dst, int dst_pitch){ return _SDL_ConvertPixels(__traits(parameters)); }
	private int function(SDL_Surface* surface, const(SDL_Rect)* rect, uint color) _SDL_FillRect;
	int SDL_FillRect(SDL_Surface* surface, const(SDL_Rect)* rect, uint color){ return _SDL_FillRect(__traits(parameters)); }
	private int function(SDL_Surface* surface, const(SDL_Rect)* rects, int count, uint color) _SDL_FillRects;
	int SDL_FillRects(SDL_Surface* surface, const(SDL_Rect)* rects, int count, uint color){ return _SDL_FillRects(__traits(parameters)); }
	private int function(SDL_Surface* src, const(SDL_Rect)* srcrect, SDL_Surface* dst, SDL_Rect* dstrect) _SDL_UpperBlit;
	int SDL_UpperBlit(SDL_Surface* src, const(SDL_Rect)* srcrect, SDL_Surface* dst, SDL_Rect* dstrect){ return _SDL_UpperBlit(__traits(parameters)); }
	private int function(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect) _SDL_LowerBlit;
	int SDL_LowerBlit(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect){ return _SDL_LowerBlit(__traits(parameters)); }
	private int function(SDL_Surface* src, const(SDL_Rect)* srcrect, SDL_Surface* dst, const(SDL_Rect)* dstrect) _SDL_SoftStretch;
	int SDL_SoftStretch(SDL_Surface* src, const(SDL_Rect)* srcrect, SDL_Surface* dst, const(SDL_Rect)* dstrect){ return _SDL_SoftStretch(__traits(parameters)); }
	private int function(SDL_Surface* src, const(SDL_Rect)* srcrect, SDL_Surface* dst, SDL_Rect* dstrect) _SDL_UpperBlitScaled;
	int SDL_UpperBlitScaled(SDL_Surface* src, const(SDL_Rect)* srcrect, SDL_Surface* dst, SDL_Rect* dstrect){ return _SDL_UpperBlitScaled(__traits(parameters)); }
	private int function(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect) _SDL_LowerBlitScaled;
	int SDL_LowerBlitScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect){ return _SDL_LowerBlitScaled(__traits(parameters)); }
	alias SDL_BlitSurface = SDL_UpperBlit;
	alias SDL_BlitScaled = SDL_UpperBlitScaled;
	
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_CreateRGBSurface, "SDL_CreateRGBSurface");
	lib.bindSymbol(cast(void**)&_SDL_CreateRGBSurfaceFrom, "SDL_CreateRGBSurfaceFrom");
	lib.bindSymbol(cast(void**)&_SDL_FreeSurface, "SDL_FreeSurface");
	lib.bindSymbol(cast(void**)&_SDL_SetSurfacePalette, "SDL_SetSurfacePalette");
	lib.bindSymbol(cast(void**)&_SDL_LockSurface, "SDL_LockSurface");
	lib.bindSymbol(cast(void**)&_SDL_UnlockSurface, "SDL_UnlockSurface");
	lib.bindSymbol(cast(void**)&_SDL_LoadBMP_RW, "SDL_LoadBMP_RW");
	lib.bindSymbol(cast(void**)&_SDL_SaveBMP_RW, "SDL_SaveBMP_RW");
	lib.bindSymbol(cast(void**)&_SDL_SetSurfaceRLE, "SDL_SetSurfaceRLE");
	lib.bindSymbol(cast(void**)&_SDL_SetColorKey, "SDL_SetColorKey");
	lib.bindSymbol(cast(void**)&_SDL_GetColorKey, "SDL_GetColorKey");
	lib.bindSymbol(cast(void**)&_SDL_SetSurfaceColorMod, "SDL_SetSurfaceColorMod");
	lib.bindSymbol(cast(void**)&_SDL_GetSurfaceColorMod, "SDL_GetSurfaceColorMod");
	lib.bindSymbol(cast(void**)&_SDL_SetSurfaceAlphaMod, "SDL_SetSurfaceAlphaMod");
	lib.bindSymbol(cast(void**)&_SDL_GetSurfaceAlphaMod, "SDL_GetSurfaceAlphaMod");
	lib.bindSymbol(cast(void**)&_SDL_SetSurfaceBlendMode, "SDL_SetSurfaceBlendMode");
	lib.bindSymbol(cast(void**)&_SDL_GetSurfaceBlendMode, "SDL_GetSurfaceBlendMode");
	lib.bindSymbol(cast(void**)&_SDL_SetClipRect, "SDL_SetClipRect");
	lib.bindSymbol(cast(void**)&_SDL_GetClipRect, "SDL_GetClipRect");
	lib.bindSymbol(cast(void**)&_SDL_ConvertSurface, "SDL_ConvertSurface");
	lib.bindSymbol(cast(void**)&_SDL_ConvertSurfaceFormat, "SDL_ConvertSurfaceFormat");
	lib.bindSymbol(cast(void**)&_SDL_ConvertPixels, "SDL_ConvertPixels");
	lib.bindSymbol(cast(void**)&_SDL_FillRect, "SDL_FillRect");
	lib.bindSymbol(cast(void**)&_SDL_FillRects, "SDL_FillRects");
	lib.bindSymbol(cast(void**)&_SDL_UpperBlit, "SDL_UpperBlit");
	lib.bindSymbol(cast(void**)&_SDL_LowerBlit, "SDL_LowerBlit");
	lib.bindSymbol(cast(void**)&_SDL_SoftStretch, "SDL_SoftStretch");
	lib.bindSymbol(cast(void**)&_SDL_UpperBlitScaled, "SDL_UpperBlitScaled");
	lib.bindSymbol(cast(void**)&_SDL_LowerBlitScaled, "SDL_LowerBlitScaled");
}

// expansion at source/sdl/video.d(244,1)
extern(C) @nogc nothrow __gshared{
	private int function() _SDL_GetNumVideoDrivers;
	int SDL_GetNumVideoDrivers(){ return _SDL_GetNumVideoDrivers(__traits(parameters)); }
	private const(char)* function(int index) _SDL_GetVideoDriver;
	const(char)* SDL_GetVideoDriver(int index){ return _SDL_GetVideoDriver(__traits(parameters)); }
	private int function(const(char)* driver_name) _SDL_VideoInit;
	int SDL_VideoInit(const(char)* driver_name){ return _SDL_VideoInit(__traits(parameters)); }
	private void function() _SDL_VideoQuit;
	void SDL_VideoQuit(){ _SDL_VideoQuit(__traits(parameters)); }
	private const(char)* function() _SDL_GetCurrentVideoDriver;
	const(char)* SDL_GetCurrentVideoDriver(){ return _SDL_GetCurrentVideoDriver(__traits(parameters)); }
	private int function() _SDL_GetNumVideoDisplays;
	int SDL_GetNumVideoDisplays(){ return _SDL_GetNumVideoDisplays(__traits(parameters)); }
	private const(char)* function(int displayIndex) _SDL_GetDisplayName;
	const(char)* SDL_GetDisplayName(int displayIndex){ return _SDL_GetDisplayName(__traits(parameters)); }
	private int function(int displayIndex, SDL_Rect* rect) _SDL_GetDisplayBounds;
	int SDL_GetDisplayBounds(int displayIndex, SDL_Rect* rect){ return _SDL_GetDisplayBounds(__traits(parameters)); }
	private int function(int displayIndex) _SDL_GetNumDisplayModes;
	int SDL_GetNumDisplayModes(int displayIndex){ return _SDL_GetNumDisplayModes(__traits(parameters)); }
	private int function(int displayIndex, int modeIndex, SDL_DisplayMode* mode) _SDL_GetDisplayMode;
	int SDL_GetDisplayMode(int displayIndex, int modeIndex, SDL_DisplayMode* mode){ return _SDL_GetDisplayMode(__traits(parameters)); }
	private int function(int displayIndex, SDL_DisplayMode* mode) _SDL_GetDesktopDisplayMode;
	int SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode* mode){ return _SDL_GetDesktopDisplayMode(__traits(parameters)); }
	private int function(int displayIndex, SDL_DisplayMode* mode) _SDL_GetCurrentDisplayMode;
	int SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode* mode){ return _SDL_GetCurrentDisplayMode(__traits(parameters)); }
	private SDL_DisplayMode* function(int displayIndex, const(SDL_DisplayMode)* mode, SDL_DisplayMode* closest) _SDL_GetClosestDisplayMode;
	SDL_DisplayMode* SDL_GetClosestDisplayMode(int displayIndex, const(SDL_DisplayMode)* mode, SDL_DisplayMode* closest){ return _SDL_GetClosestDisplayMode(__traits(parameters)); }
	private int function(SDL_Window* window) _SDL_GetWindowDisplayIndex;
	int SDL_GetWindowDisplayIndex(SDL_Window* window){ return _SDL_GetWindowDisplayIndex(__traits(parameters)); }
	private int function(SDL_Window* window, const(SDL_DisplayMode)* mode) _SDL_SetWindowDisplayMode;
	int SDL_SetWindowDisplayMode(SDL_Window* window, const(SDL_DisplayMode)* mode){ return _SDL_SetWindowDisplayMode(__traits(parameters)); }
	private int function(SDL_Window* window, SDL_DisplayMode* mode) _SDL_GetWindowDisplayMode;
	int SDL_GetWindowDisplayMode(SDL_Window* window, SDL_DisplayMode* mode){ return _SDL_GetWindowDisplayMode(__traits(parameters)); }
	private uint function(SDL_Window* window) _SDL_GetWindowPixelFormat;
	uint SDL_GetWindowPixelFormat(SDL_Window* window){ return _SDL_GetWindowPixelFormat(__traits(parameters)); }
	private SDL_Window* function(const(char)* title, int x, int y, int w, int h, SDL_WindowFlags flags) _SDL_CreateWindow;
	SDL_Window* SDL_CreateWindow(const(char)* title, int x, int y, int w, int h, SDL_WindowFlags flags){ return _SDL_CreateWindow(__traits(parameters)); }
	private SDL_Window* function(const(void)* data) _SDL_CreateWindowFrom;
	SDL_Window* SDL_CreateWindowFrom(const(void)* data){ return _SDL_CreateWindowFrom(__traits(parameters)); }
	private uint function(SDL_Window* window) _SDL_GetWindowID;
	uint SDL_GetWindowID(SDL_Window* window){ return _SDL_GetWindowID(__traits(parameters)); }
	private SDL_Window* function(uint id) _SDL_GetWindowFromID;
	SDL_Window* SDL_GetWindowFromID(uint id){ return _SDL_GetWindowFromID(__traits(parameters)); }
	private SDL_WindowFlags function(SDL_Window* window) _SDL_GetWindowFlags;
	SDL_WindowFlags SDL_GetWindowFlags(SDL_Window* window){ return _SDL_GetWindowFlags(__traits(parameters)); }
	private void function(SDL_Window* window, const(char)* title) _SDL_SetWindowTitle;
	void SDL_SetWindowTitle(SDL_Window* window, const(char)* title){ _SDL_SetWindowTitle(__traits(parameters)); }
	private const(char)* function(SDL_Window* window) _SDL_GetWindowTitle;
	const(char)* SDL_GetWindowTitle(SDL_Window* window){ return _SDL_GetWindowTitle(__traits(parameters)); }
	private void function(SDL_Window* window, SDL_Surface* icon) _SDL_SetWindowIcon;
	void SDL_SetWindowIcon(SDL_Window* window, SDL_Surface* icon){ _SDL_SetWindowIcon(__traits(parameters)); }
	private void* function(SDL_Window* window, const(char)* name, void* userdata) _SDL_SetWindowData;
	void* SDL_SetWindowData(SDL_Window* window, const(char)* name, void* userdata){ return _SDL_SetWindowData(__traits(parameters)); }
	private void* function(SDL_Window* window, const(char)* name) _SDL_GetWindowData;
	void* SDL_GetWindowData(SDL_Window* window, const(char)* name){ return _SDL_GetWindowData(__traits(parameters)); }
	private void function(SDL_Window* window, int x, int y) _SDL_SetWindowPosition;
	void SDL_SetWindowPosition(SDL_Window* window, int x, int y){ _SDL_SetWindowPosition(__traits(parameters)); }
	private void function(SDL_Window* window, int* x, int* y) _SDL_GetWindowPosition;
	void SDL_GetWindowPosition(SDL_Window* window, int* x, int* y){ _SDL_GetWindowPosition(__traits(parameters)); }
	private void function(SDL_Window* window, int w, int h) _SDL_SetWindowSize;
	void SDL_SetWindowSize(SDL_Window* window, int w, int h){ _SDL_SetWindowSize(__traits(parameters)); }
	private void function(SDL_Window* window, int* w, int* h) _SDL_GetWindowSize;
	void SDL_GetWindowSize(SDL_Window* window, int* w, int* h){ _SDL_GetWindowSize(__traits(parameters)); }
	private void function(SDL_Window* window, int min_w, int min_h) _SDL_SetWindowMinimumSize;
	void SDL_SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h){ _SDL_SetWindowMinimumSize(__traits(parameters)); }
	private void function(SDL_Window* window, int* w, int* h) _SDL_GetWindowMinimumSize;
	void SDL_GetWindowMinimumSize(SDL_Window* window, int* w, int* h){ _SDL_GetWindowMinimumSize(__traits(parameters)); }
	private void function(SDL_Window* window, int max_w, int max_h) _SDL_SetWindowMaximumSize;
	void SDL_SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h){ _SDL_SetWindowMaximumSize(__traits(parameters)); }
	private void function(SDL_Window* window, int* w, int* h) _SDL_GetWindowMaximumSize;
	void SDL_GetWindowMaximumSize(SDL_Window* window, int* w, int* h){ _SDL_GetWindowMaximumSize(__traits(parameters)); }
	private void function(SDL_Window* window, SDL_bool bordered) _SDL_SetWindowBordered;
	void SDL_SetWindowBordered(SDL_Window* window, SDL_bool bordered){ _SDL_SetWindowBordered(__traits(parameters)); }
	private void function(SDL_Window* window) _SDL_ShowWindow;
	void SDL_ShowWindow(SDL_Window* window){ _SDL_ShowWindow(__traits(parameters)); }
	private void function(SDL_Window* window) _SDL_HideWindow;
	void SDL_HideWindow(SDL_Window* window){ _SDL_HideWindow(__traits(parameters)); }
	private void function(SDL_Window* window) _SDL_RaiseWindow;
	void SDL_RaiseWindow(SDL_Window* window){ _SDL_RaiseWindow(__traits(parameters)); }
	private void function(SDL_Window* window) _SDL_MaximizeWindow;
	void SDL_MaximizeWindow(SDL_Window* window){ _SDL_MaximizeWindow(__traits(parameters)); }
	private void function(SDL_Window* window) _SDL_MinimizeWindow;
	void SDL_MinimizeWindow(SDL_Window* window){ _SDL_MinimizeWindow(__traits(parameters)); }
	private void function(SDL_Window* window) _SDL_RestoreWindow;
	void SDL_RestoreWindow(SDL_Window* window){ _SDL_RestoreWindow(__traits(parameters)); }
	private int function(SDL_Window* window, SDL_WindowFlags flags) _SDL_SetWindowFullscreen;
	int SDL_SetWindowFullscreen(SDL_Window* window, SDL_WindowFlags flags){ return _SDL_SetWindowFullscreen(__traits(parameters)); }
	private SDL_Surface* function(SDL_Window* window) _SDL_GetWindowSurface;
	SDL_Surface* SDL_GetWindowSurface(SDL_Window* window){ return _SDL_GetWindowSurface(__traits(parameters)); }
	private int function(SDL_Window* window) _SDL_UpdateWindowSurface;
	int SDL_UpdateWindowSurface(SDL_Window* window){ return _SDL_UpdateWindowSurface(__traits(parameters)); }
	private int function(SDL_Window* window, SDL_Rect* rects, int numrects) _SDL_UpdateWindowSurfaceRects;
	int SDL_UpdateWindowSurfaceRects(SDL_Window* window, SDL_Rect* rects, int numrects){ return _SDL_UpdateWindowSurfaceRects(__traits(parameters)); }
	private void function(SDL_Window* window, SDL_bool grabbed) _SDL_SetWindowGrab;
	void SDL_SetWindowGrab(SDL_Window* window, SDL_bool grabbed){ _SDL_SetWindowGrab(__traits(parameters)); }
	private SDL_bool function(SDL_Window* window) _SDL_GetWindowGrab;
	SDL_bool SDL_GetWindowGrab(SDL_Window* window){ return _SDL_GetWindowGrab(__traits(parameters)); }
	private int function(SDL_Window* window, float brightness) _SDL_SetWindowBrightness;
	int SDL_SetWindowBrightness(SDL_Window* window, float brightness){ return _SDL_SetWindowBrightness(__traits(parameters)); }
	private float function(SDL_Window* window) _SDL_GetWindowBrightness;
	float SDL_GetWindowBrightness(SDL_Window* window){ return _SDL_GetWindowBrightness(__traits(parameters)); }
	private int function(SDL_Window* window, const(ushort)* red, const(ushort)* green, const(ushort)* blue) _SDL_SetWindowGammaRamp;
	int SDL_SetWindowGammaRamp(SDL_Window* window, const(ushort)* red, const(ushort)* green, const(ushort)* blue){ return _SDL_SetWindowGammaRamp(__traits(parameters)); }
	private int function(SDL_Window* window, ushort* red, ushort* green, ushort* blue) _SDL_GetWindowGammaRamp;
	int SDL_GetWindowGammaRamp(SDL_Window* window, ushort* red, ushort* green, ushort* blue){ return _SDL_GetWindowGammaRamp(__traits(parameters)); }
	private void function(SDL_Window* window) _SDL_DestroyWindow;
	void SDL_DestroyWindow(SDL_Window* window){ _SDL_DestroyWindow(__traits(parameters)); }
	private SDL_bool function() _SDL_IsScreenSaverEnabled;
	SDL_bool SDL_IsScreenSaverEnabled(){ return _SDL_IsScreenSaverEnabled(__traits(parameters)); }
	private void function() _SDL_EnableScreenSaver;
	void SDL_EnableScreenSaver(){ _SDL_EnableScreenSaver(__traits(parameters)); }
	private void function() _SDL_DisableScreenSaver;
	void SDL_DisableScreenSaver(){ _SDL_DisableScreenSaver(__traits(parameters)); }
	private int function(const(char)* path) _SDL_GL_LoadLibrary;
	int SDL_GL_LoadLibrary(const(char)* path){ return _SDL_GL_LoadLibrary(__traits(parameters)); }
	private void* function(const(char)* proc) _SDL_GL_GetProcAddress;
	void* SDL_GL_GetProcAddress(const(char)* proc){ return _SDL_GL_GetProcAddress(__traits(parameters)); }
	private void function() _SDL_GL_UnloadLibrary;
	void SDL_GL_UnloadLibrary(){ _SDL_GL_UnloadLibrary(__traits(parameters)); }
	private SDL_bool function(const(char)* extension) _SDL_GL_ExtensionSupported;
	SDL_bool SDL_GL_ExtensionSupported(const(char)* extension){ return _SDL_GL_ExtensionSupported(__traits(parameters)); }
	private int function(SDL_GLattr attr, int value) _SDL_GL_SetAttribute;
	int SDL_GL_SetAttribute(SDL_GLattr attr, int value){ return _SDL_GL_SetAttribute(__traits(parameters)); }
	private int function(SDL_GLattr attr, int* value) _SDL_GL_GetAttribute;
	int SDL_GL_GetAttribute(SDL_GLattr attr, int* value){ return _SDL_GL_GetAttribute(__traits(parameters)); }
	private SDL_GLContext function(SDL_Window* window) _SDL_GL_CreateContext;
	SDL_GLContext SDL_GL_CreateContext(SDL_Window* window){ return _SDL_GL_CreateContext(__traits(parameters)); }
	private int function(SDL_Window* window, SDL_GLContext context) _SDL_GL_MakeCurrent;
	int SDL_GL_MakeCurrent(SDL_Window* window, SDL_GLContext context){ return _SDL_GL_MakeCurrent(__traits(parameters)); }
	private SDL_Window* function() _SDL_GL_GetCurrentWindow;
	SDL_Window* SDL_GL_GetCurrentWindow(){ return _SDL_GL_GetCurrentWindow(__traits(parameters)); }
	private SDL_GLContext function() _SDL_GL_GetCurrentContext;
	SDL_GLContext SDL_GL_GetCurrentContext(){ return _SDL_GL_GetCurrentContext(__traits(parameters)); }
	private int function(int interval) _SDL_GL_SetSwapInterval;
	int SDL_GL_SetSwapInterval(int interval){ return _SDL_GL_SetSwapInterval(__traits(parameters)); }
	private int function() _SDL_GL_GetSwapInterval;
	int SDL_GL_GetSwapInterval(){ return _SDL_GL_GetSwapInterval(__traits(parameters)); }
	private void function(SDL_Window* window) _SDL_GL_SwapWindow;
	void SDL_GL_SwapWindow(SDL_Window* window){ _SDL_GL_SwapWindow(__traits(parameters)); }
	private void function(SDL_GLContext context) _SDL_GL_DeleteContext;
	void SDL_GL_DeleteContext(SDL_GLContext context){ _SDL_GL_DeleteContext(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetNumVideoDrivers, "SDL_GetNumVideoDrivers");
	lib.bindSymbol(cast(void**)&_SDL_GetVideoDriver, "SDL_GetVideoDriver");
	lib.bindSymbol(cast(void**)&_SDL_VideoInit, "SDL_VideoInit");
	lib.bindSymbol(cast(void**)&_SDL_VideoQuit, "SDL_VideoQuit");
	lib.bindSymbol(cast(void**)&_SDL_GetCurrentVideoDriver, "SDL_GetCurrentVideoDriver");
	lib.bindSymbol(cast(void**)&_SDL_GetNumVideoDisplays, "SDL_GetNumVideoDisplays");
	lib.bindSymbol(cast(void**)&_SDL_GetDisplayName, "SDL_GetDisplayName");
	lib.bindSymbol(cast(void**)&_SDL_GetDisplayBounds, "SDL_GetDisplayBounds");
	lib.bindSymbol(cast(void**)&_SDL_GetNumDisplayModes, "SDL_GetNumDisplayModes");
	lib.bindSymbol(cast(void**)&_SDL_GetDisplayMode, "SDL_GetDisplayMode");
	lib.bindSymbol(cast(void**)&_SDL_GetDesktopDisplayMode, "SDL_GetDesktopDisplayMode");
	lib.bindSymbol(cast(void**)&_SDL_GetCurrentDisplayMode, "SDL_GetCurrentDisplayMode");
	lib.bindSymbol(cast(void**)&_SDL_GetClosestDisplayMode, "SDL_GetClosestDisplayMode");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowDisplayIndex, "SDL_GetWindowDisplayIndex");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowDisplayMode, "SDL_SetWindowDisplayMode");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowDisplayMode, "SDL_GetWindowDisplayMode");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowPixelFormat, "SDL_GetWindowPixelFormat");
	lib.bindSymbol(cast(void**)&_SDL_CreateWindow, "SDL_CreateWindow");
	lib.bindSymbol(cast(void**)&_SDL_CreateWindowFrom, "SDL_CreateWindowFrom");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowID, "SDL_GetWindowID");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowFromID, "SDL_GetWindowFromID");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowFlags, "SDL_GetWindowFlags");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowTitle, "SDL_SetWindowTitle");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowTitle, "SDL_GetWindowTitle");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowIcon, "SDL_SetWindowIcon");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowData, "SDL_SetWindowData");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowData, "SDL_GetWindowData");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowPosition, "SDL_SetWindowPosition");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowPosition, "SDL_GetWindowPosition");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowSize, "SDL_SetWindowSize");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowSize, "SDL_GetWindowSize");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowMinimumSize, "SDL_SetWindowMinimumSize");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowMinimumSize, "SDL_GetWindowMinimumSize");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowMaximumSize, "SDL_SetWindowMaximumSize");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowMaximumSize, "SDL_GetWindowMaximumSize");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowBordered, "SDL_SetWindowBordered");
	lib.bindSymbol(cast(void**)&_SDL_ShowWindow, "SDL_ShowWindow");
	lib.bindSymbol(cast(void**)&_SDL_HideWindow, "SDL_HideWindow");
	lib.bindSymbol(cast(void**)&_SDL_RaiseWindow, "SDL_RaiseWindow");
	lib.bindSymbol(cast(void**)&_SDL_MaximizeWindow, "SDL_MaximizeWindow");
	lib.bindSymbol(cast(void**)&_SDL_MinimizeWindow, "SDL_MinimizeWindow");
	lib.bindSymbol(cast(void**)&_SDL_RestoreWindow, "SDL_RestoreWindow");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowFullscreen, "SDL_SetWindowFullscreen");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowSurface, "SDL_GetWindowSurface");
	lib.bindSymbol(cast(void**)&_SDL_UpdateWindowSurface, "SDL_UpdateWindowSurface");
	lib.bindSymbol(cast(void**)&_SDL_UpdateWindowSurfaceRects, "SDL_UpdateWindowSurfaceRects");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowGrab, "SDL_SetWindowGrab");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowGrab, "SDL_GetWindowGrab");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowBrightness, "SDL_SetWindowBrightness");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowBrightness, "SDL_GetWindowBrightness");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowGammaRamp, "SDL_SetWindowGammaRamp");
	lib.bindSymbol(cast(void**)&_SDL_GetWindowGammaRamp, "SDL_GetWindowGammaRamp");
	lib.bindSymbol(cast(void**)&_SDL_DestroyWindow, "SDL_DestroyWindow");
	lib.bindSymbol(cast(void**)&_SDL_IsScreenSaverEnabled, "SDL_IsScreenSaverEnabled");
	lib.bindSymbol(cast(void**)&_SDL_EnableScreenSaver, "SDL_EnableScreenSaver");
	lib.bindSymbol(cast(void**)&_SDL_DisableScreenSaver, "SDL_DisableScreenSaver");
	lib.bindSymbol(cast(void**)&_SDL_GL_LoadLibrary, "SDL_GL_LoadLibrary");
	lib.bindSymbol(cast(void**)&_SDL_GL_GetProcAddress, "SDL_GL_GetProcAddress");
	lib.bindSymbol(cast(void**)&_SDL_GL_UnloadLibrary, "SDL_GL_UnloadLibrary");
	lib.bindSymbol(cast(void**)&_SDL_GL_ExtensionSupported, "SDL_GL_ExtensionSupported");
	lib.bindSymbol(cast(void**)&_SDL_GL_SetAttribute, "SDL_GL_SetAttribute");
	lib.bindSymbol(cast(void**)&_SDL_GL_GetAttribute, "SDL_GL_GetAttribute");
	lib.bindSymbol(cast(void**)&_SDL_GL_CreateContext, "SDL_GL_CreateContext");
	lib.bindSymbol(cast(void**)&_SDL_GL_MakeCurrent, "SDL_GL_MakeCurrent");
	lib.bindSymbol(cast(void**)&_SDL_GL_GetCurrentWindow, "SDL_GL_GetCurrentWindow");
	lib.bindSymbol(cast(void**)&_SDL_GL_GetCurrentContext, "SDL_GL_GetCurrentContext");
	lib.bindSymbol(cast(void**)&_SDL_GL_SetSwapInterval, "SDL_GL_SetSwapInterval");
	lib.bindSymbol(cast(void**)&_SDL_GL_GetSwapInterval, "SDL_GL_GetSwapInterval");
	lib.bindSymbol(cast(void**)&_SDL_GL_SwapWindow, "SDL_GL_SwapWindow");
	lib.bindSymbol(cast(void**)&_SDL_GL_DeleteContext, "SDL_GL_DeleteContext");
}

// expansion at source/sdl/keyboard.d(26,1)
extern(C) @nogc nothrow __gshared{
	private SDL_Window* function() _SDL_GetKeyboardFocus;
	SDL_Window* SDL_GetKeyboardFocus(){ return _SDL_GetKeyboardFocus(__traits(parameters)); }
	private ubyte* function(int* numkeys) _SDL_GetKeyboardState;
	ubyte* SDL_GetKeyboardState(int* numkeys){ return _SDL_GetKeyboardState(__traits(parameters)); }
	private SDL_Keymod function() _SDL_GetModState;
	SDL_Keymod SDL_GetModState(){ return _SDL_GetModState(__traits(parameters)); }
	private void function(SDL_Keymod modstate) _SDL_SetModState;
	void SDL_SetModState(SDL_Keymod modstate){ _SDL_SetModState(__traits(parameters)); }
	private SDL_KeyCode function(SDL_Scancode scancode) _SDL_GetKeyFromScancode;
	SDL_KeyCode SDL_GetKeyFromScancode(SDL_Scancode scancode){ return _SDL_GetKeyFromScancode(__traits(parameters)); }
	private SDL_Scancode function(SDL_KeyCode key) _SDL_GetScancodeFromKey;
	SDL_Scancode SDL_GetScancodeFromKey(SDL_KeyCode key){ return _SDL_GetScancodeFromKey(__traits(parameters)); }
	private const(char)* function(SDL_Scancode scancode) _SDL_GetScancodeName;
	const(char)* SDL_GetScancodeName(SDL_Scancode scancode){ return _SDL_GetScancodeName(__traits(parameters)); }
	private SDL_Scancode function(const(char)* name) _SDL_GetScancodeFromName;
	SDL_Scancode SDL_GetScancodeFromName(const(char)* name){ return _SDL_GetScancodeFromName(__traits(parameters)); }
	private const(char)* function(SDL_KeyCode key) _SDL_GetKeyName;
	const(char)* SDL_GetKeyName(SDL_KeyCode key){ return _SDL_GetKeyName(__traits(parameters)); }
	private SDL_KeyCode function(const(char)* name) _SDL_GetKeyFromName;
	SDL_KeyCode SDL_GetKeyFromName(const(char)* name){ return _SDL_GetKeyFromName(__traits(parameters)); }
	private void function() _SDL_StartTextInput;
	void SDL_StartTextInput(){ _SDL_StartTextInput(__traits(parameters)); }
	private SDL_bool function() _SDL_IsTextInputActive;
	SDL_bool SDL_IsTextInputActive(){ return _SDL_IsTextInputActive(__traits(parameters)); }
	private void function() _SDL_StopTextInput;
	void SDL_StopTextInput(){ _SDL_StopTextInput(__traits(parameters)); }
	private SDL_bool function() _SDL_HasScreenKeyboardSupport;
	SDL_bool SDL_HasScreenKeyboardSupport(){ return _SDL_HasScreenKeyboardSupport(__traits(parameters)); }
	private SDL_bool function(SDL_Window* window) _SDL_IsScreenKeyboardShown;
	SDL_bool SDL_IsScreenKeyboardShown(SDL_Window* window){ return _SDL_IsScreenKeyboardShown(__traits(parameters)); }
	private void function(SDL_Rect* rect) _SDL_SetTextInputRect;
	void SDL_SetTextInputRect(SDL_Rect* rect){ _SDL_SetTextInputRect(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetKeyboardFocus, "SDL_GetKeyboardFocus");
	lib.bindSymbol(cast(void**)&_SDL_GetKeyboardState, "SDL_GetKeyboardState");
	lib.bindSymbol(cast(void**)&_SDL_GetModState, "SDL_GetModState");
	lib.bindSymbol(cast(void**)&_SDL_SetModState, "SDL_SetModState");
	lib.bindSymbol(cast(void**)&_SDL_GetKeyFromScancode, "SDL_GetKeyFromScancode");
	lib.bindSymbol(cast(void**)&_SDL_GetScancodeFromKey, "SDL_GetScancodeFromKey");
	lib.bindSymbol(cast(void**)&_SDL_GetScancodeName, "SDL_GetScancodeName");
	lib.bindSymbol(cast(void**)&_SDL_GetScancodeFromName, "SDL_GetScancodeFromName");
	lib.bindSymbol(cast(void**)&_SDL_GetKeyName, "SDL_GetKeyName");
	lib.bindSymbol(cast(void**)&_SDL_GetKeyFromName, "SDL_GetKeyFromName");
	lib.bindSymbol(cast(void**)&_SDL_StartTextInput, "SDL_StartTextInput");
	lib.bindSymbol(cast(void**)&_SDL_IsTextInputActive, "SDL_IsTextInputActive");
	lib.bindSymbol(cast(void**)&_SDL_StopTextInput, "SDL_StopTextInput");
	lib.bindSymbol(cast(void**)&_SDL_HasScreenKeyboardSupport, "SDL_HasScreenKeyboardSupport");
	lib.bindSymbol(cast(void**)&_SDL_IsScreenKeyboardShown, "SDL_IsScreenKeyboardShown");
	lib.bindSymbol(cast(void**)&_SDL_SetTextInputRect, "SDL_SetTextInputRect");
}

// expansion at source/sdl/syswm.d(237,1)
extern(C) @nogc nothrow __gshared{
	private SDL_bool function(SDL_Window* window, SDL_SysWMinfo* info) _SDL_GetWindowWMInfo;
	SDL_bool SDL_GetWindowWMInfo(SDL_Window* window, SDL_SysWMinfo* info){ return _SDL_GetWindowWMInfo(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetWindowWMInfo, "SDL_GetWindowWMInfo");
}

// expansion at source/sdl/events.d(512,1)
extern(C) @nogc nothrow __gshared{
	private void function() _SDL_PumpEvents;
	void SDL_PumpEvents(){ _SDL_PumpEvents(__traits(parameters)); }
	private int function(SDL_Event* events, int numevents, SDL_eventaction action, uint minType, uint maxType) _SDL_PeepEvents;
	int SDL_PeepEvents(SDL_Event* events, int numevents, SDL_eventaction action, uint minType, uint maxType){ return _SDL_PeepEvents(__traits(parameters)); }
	private SDL_bool function(uint type) _SDL_HasEvent;
	SDL_bool SDL_HasEvent(uint type){ return _SDL_HasEvent(__traits(parameters)); }
	private SDL_bool function(uint minType, uint maxType) _SDL_HasEvents;
	SDL_bool SDL_HasEvents(uint minType, uint maxType){ return _SDL_HasEvents(__traits(parameters)); }
	private void function(uint type) _SDL_FlushEvent;
	void SDL_FlushEvent(uint type){ _SDL_FlushEvent(__traits(parameters)); }
	private void function(uint minType, uint maxType) _SDL_FlushEvents;
	void SDL_FlushEvents(uint minType, uint maxType){ _SDL_FlushEvents(__traits(parameters)); }
	private int function(SDL_Event* event) _SDL_PollEvent;
	int SDL_PollEvent(SDL_Event* event){ return _SDL_PollEvent(__traits(parameters)); }
	private int function(SDL_Event* event) _SDL_WaitEvent;
	int SDL_WaitEvent(SDL_Event* event){ return _SDL_WaitEvent(__traits(parameters)); }
	private int function(SDL_Event* event, int timeout) _SDL_WaitEventTimeout;
	int SDL_WaitEventTimeout(SDL_Event* event, int timeout){ return _SDL_WaitEventTimeout(__traits(parameters)); }
	private int function(SDL_Event* event) _SDL_PushEvent;
	int SDL_PushEvent(SDL_Event* event){ return _SDL_PushEvent(__traits(parameters)); }
	private void function(SDL_EventFilter filter, void* userdata) _SDL_SetEventFilter;
	void SDL_SetEventFilter(SDL_EventFilter filter, void* userdata){ _SDL_SetEventFilter(__traits(parameters)); }
	private SDL_bool function(SDL_EventFilter* filter, void** userdata) _SDL_GetEventFilter;
	SDL_bool SDL_GetEventFilter(SDL_EventFilter* filter, void** userdata){ return _SDL_GetEventFilter(__traits(parameters)); }
	private void function(SDL_EventFilter filter, void* userdata) _SDL_AddEventWatch;
	void SDL_AddEventWatch(SDL_EventFilter filter, void* userdata){ _SDL_AddEventWatch(__traits(parameters)); }
	private void function(SDL_EventFilter filter, void* userdata) _SDL_DelEventWatch;
	void SDL_DelEventWatch(SDL_EventFilter filter, void* userdata){ _SDL_DelEventWatch(__traits(parameters)); }
	private void function(SDL_EventFilter filter, void* userdata) _SDL_FilterEvents;
	void SDL_FilterEvents(SDL_EventFilter filter, void* userdata){ _SDL_FilterEvents(__traits(parameters)); }
	private ubyte function(uint type, int state) _SDL_EventState;
	ubyte SDL_EventState(uint type, int state){ return _SDL_EventState(__traits(parameters)); }
	private uint function(int numevents) _SDL_RegisterEvents;
	uint SDL_RegisterEvents(int numevents){ return _SDL_RegisterEvents(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_PumpEvents, "SDL_PumpEvents");
	lib.bindSymbol(cast(void**)&_SDL_PeepEvents, "SDL_PeepEvents");
	lib.bindSymbol(cast(void**)&_SDL_HasEvent, "SDL_HasEvent");
	lib.bindSymbol(cast(void**)&_SDL_HasEvents, "SDL_HasEvents");
	lib.bindSymbol(cast(void**)&_SDL_FlushEvent, "SDL_FlushEvent");
	lib.bindSymbol(cast(void**)&_SDL_FlushEvents, "SDL_FlushEvents");
	lib.bindSymbol(cast(void**)&_SDL_PollEvent, "SDL_PollEvent");
	lib.bindSymbol(cast(void**)&_SDL_WaitEvent, "SDL_WaitEvent");
	lib.bindSymbol(cast(void**)&_SDL_WaitEventTimeout, "SDL_WaitEventTimeout");
	lib.bindSymbol(cast(void**)&_SDL_PushEvent, "SDL_PushEvent");
	lib.bindSymbol(cast(void**)&_SDL_SetEventFilter, "SDL_SetEventFilter");
	lib.bindSymbol(cast(void**)&_SDL_GetEventFilter, "SDL_GetEventFilter");
	lib.bindSymbol(cast(void**)&_SDL_AddEventWatch, "SDL_AddEventWatch");
	lib.bindSymbol(cast(void**)&_SDL_DelEventWatch, "SDL_DelEventWatch");
	lib.bindSymbol(cast(void**)&_SDL_FilterEvents, "SDL_FilterEvents");
	lib.bindSymbol(cast(void**)&_SDL_EventState, "SDL_EventState");
	lib.bindSymbol(cast(void**)&_SDL_RegisterEvents, "SDL_RegisterEvents");
}

// expansion at source/sdl/filesystem.d(13,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/sensor.d(36,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/gamecontroller.d(123,1)
extern(C) @nogc nothrow __gshared{
	private int function(const(char)* mappingString) _SDL_GameControllerAddMapping;
	int SDL_GameControllerAddMapping(const(char)* mappingString){ return _SDL_GameControllerAddMapping(__traits(parameters)); }
	private char* function(SDL_JoystickGUID guid) _SDL_GameControllerMappingForGUID;
	char* SDL_GameControllerMappingForGUID(SDL_JoystickGUID guid){ return _SDL_GameControllerMappingForGUID(__traits(parameters)); }
	private char* function(SDL_GameController* gamecontroller) _SDL_GameControllerMapping;
	char* SDL_GameControllerMapping(SDL_GameController* gamecontroller){ return _SDL_GameControllerMapping(__traits(parameters)); }
	private SDL_bool function(int joystick_index) _SDL_IsGameController;
	SDL_bool SDL_IsGameController(int joystick_index){ return _SDL_IsGameController(__traits(parameters)); }
	private const(char)* function(int joystick_index) _SDL_GameControllerNameForIndex;
	const(char)* SDL_GameControllerNameForIndex(int joystick_index){ return _SDL_GameControllerNameForIndex(__traits(parameters)); }
	private SDL_GameController* function(int joystick_index) _SDL_GameControllerOpen;
	SDL_GameController* SDL_GameControllerOpen(int joystick_index){ return _SDL_GameControllerOpen(__traits(parameters)); }
	private const(char)* function(SDL_GameController* gamecontroller) _SDL_GameControllerName;
	const(char)* SDL_GameControllerName(SDL_GameController* gamecontroller){ return _SDL_GameControllerName(__traits(parameters)); }
	private SDL_bool function(SDL_GameController* gamecontroller) _SDL_GameControllerGetAttached;
	SDL_bool SDL_GameControllerGetAttached(SDL_GameController* gamecontroller){ return _SDL_GameControllerGetAttached(__traits(parameters)); }
	private SDL_Joystick* function(SDL_GameController* gamecontroller) _SDL_GameControllerGetJoystick;
	SDL_Joystick* SDL_GameControllerGetJoystick(SDL_GameController* gamecontroller){ return _SDL_GameControllerGetJoystick(__traits(parameters)); }
	private int function(int state) _SDL_GameControllerEventState;
	int SDL_GameControllerEventState(int state){ return _SDL_GameControllerEventState(__traits(parameters)); }
	private void function() _SDL_GameControllerUpdate;
	void SDL_GameControllerUpdate(){ _SDL_GameControllerUpdate(__traits(parameters)); }
	private SDL_GameControllerAxis function(const(char)* pchString) _SDL_GameControllerGetAxisFromString;
	SDL_GameControllerAxis SDL_GameControllerGetAxisFromString(const(char)* pchString){ return _SDL_GameControllerGetAxisFromString(__traits(parameters)); }
	private const(char)* function(SDL_GameControllerAxis axis) _SDL_GameControllerGetStringForAxis;
	const(char)* SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis){ return _SDL_GameControllerGetStringForAxis(__traits(parameters)); }
	private SDL_GameControllerButtonBind function(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis) _SDL_GameControllerGetBindForAxis;
	SDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis){ return _SDL_GameControllerGetBindForAxis(__traits(parameters)); }
	private short function(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis) _SDL_GameControllerGetAxis;
	short SDL_GameControllerGetAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis){ return _SDL_GameControllerGetAxis(__traits(parameters)); }
	private SDL_GameControllerButton function(const(char*) pchString) _SDL_GameControllerGetButtonFromString;
	SDL_GameControllerButton SDL_GameControllerGetButtonFromString(const(char*) pchString){ return _SDL_GameControllerGetButtonFromString(__traits(parameters)); }
	private const(char)* function(SDL_GameControllerButton button) _SDL_GameControllerGetStringForButton;
	const(char)* SDL_GameControllerGetStringForButton(SDL_GameControllerButton button){ return _SDL_GameControllerGetStringForButton(__traits(parameters)); }
	private SDL_GameControllerButtonBind function(SDL_GameController* gamecontroller, SDL_GameControllerButton button) _SDL_GameControllerGetBindForButton;
	SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button){ return _SDL_GameControllerGetBindForButton(__traits(parameters)); }
	private ubyte function(SDL_GameController* gamecontroller, SDL_GameControllerButton button) _SDL_GameControllerGetButton;
	ubyte SDL_GameControllerGetButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button){ return _SDL_GameControllerGetButton(__traits(parameters)); }
	private void function(SDL_GameController* gamecontroller) _SDL_GameControllerClose;
	void SDL_GameControllerClose(SDL_GameController* gamecontroller){ _SDL_GameControllerClose(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GameControllerAddMapping, "SDL_GameControllerAddMapping");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerMappingForGUID, "SDL_GameControllerMappingForGUID");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerMapping, "SDL_GameControllerMapping");
	lib.bindSymbol(cast(void**)&_SDL_IsGameController, "SDL_IsGameController");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerNameForIndex, "SDL_GameControllerNameForIndex");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerOpen, "SDL_GameControllerOpen");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerName, "SDL_GameControllerName");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerGetAttached, "SDL_GameControllerGetAttached");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerGetJoystick, "SDL_GameControllerGetJoystick");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerEventState, "SDL_GameControllerEventState");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerUpdate, "SDL_GameControllerUpdate");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerGetAxisFromString, "SDL_GameControllerGetAxisFromString");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerGetStringForAxis, "SDL_GameControllerGetStringForAxis");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerGetBindForAxis, "SDL_GameControllerGetBindForAxis");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerGetAxis, "SDL_GameControllerGetAxis");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerGetButtonFromString, "SDL_GameControllerGetButtonFromString");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerGetStringForButton, "SDL_GameControllerGetStringForButton");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerGetBindForButton, "SDL_GameControllerGetBindForButton");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerGetButton, "SDL_GameControllerGetButton");
	lib.bindSymbol(cast(void**)&_SDL_GameControllerClose, "SDL_GameControllerClose");
}

// expansion at source/sdl/hidapi.d(36,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/haptic.d(168,1)
extern(C) @nogc nothrow __gshared{
	private int function() _SDL_NumHaptics;
	int SDL_NumHaptics(){ return _SDL_NumHaptics(__traits(parameters)); }
	private const(char)* function(int device_index) _SDL_HapticName;
	const(char)* SDL_HapticName(int device_index){ return _SDL_HapticName(__traits(parameters)); }
	private SDL_Haptic* function(int device_index) _SDL_HapticOpen;
	SDL_Haptic* SDL_HapticOpen(int device_index){ return _SDL_HapticOpen(__traits(parameters)); }
	private int function(int device_index) _SDL_HapticOpened;
	int SDL_HapticOpened(int device_index){ return _SDL_HapticOpened(__traits(parameters)); }
	private int function(SDL_Haptic* haptic) _SDL_HapticIndex;
	int SDL_HapticIndex(SDL_Haptic* haptic){ return _SDL_HapticIndex(__traits(parameters)); }
	private int function() _SDL_MouseIsHaptic;
	int SDL_MouseIsHaptic(){ return _SDL_MouseIsHaptic(__traits(parameters)); }
	private SDL_Haptic* function() _SDL_HapticOpenFromMouse;
	SDL_Haptic* SDL_HapticOpenFromMouse(){ return _SDL_HapticOpenFromMouse(__traits(parameters)); }
	private int function(SDL_Joystick* joystick) _SDL_JoystickIsHaptic;
	int SDL_JoystickIsHaptic(SDL_Joystick* joystick){ return _SDL_JoystickIsHaptic(__traits(parameters)); }
	private SDL_Haptic* function(SDL_Joystick* joystick) _SDL_HapticOpenFromJoystick;
	SDL_Haptic* SDL_HapticOpenFromJoystick(SDL_Joystick* joystick){ return _SDL_HapticOpenFromJoystick(__traits(parameters)); }
	private void function(SDL_Haptic* haptic) _SDL_HapticClose;
	void SDL_HapticClose(SDL_Haptic* haptic){ _SDL_HapticClose(__traits(parameters)); }
	private int function(SDL_Haptic* haptic) _SDL_HapticNumEffects;
	int SDL_HapticNumEffects(SDL_Haptic* haptic){ return _SDL_HapticNumEffects(__traits(parameters)); }
	private int function(SDL_Haptic* haptic) _SDL_HapticNumEffectsPlaying;
	int SDL_HapticNumEffectsPlaying(SDL_Haptic* haptic){ return _SDL_HapticNumEffectsPlaying(__traits(parameters)); }
	private uint function(SDL_Haptic* haptic) _SDL_HapticQuery;
	uint SDL_HapticQuery(SDL_Haptic* haptic){ return _SDL_HapticQuery(__traits(parameters)); }
	private int function(SDL_Haptic* haptic) _SDL_HapticNumAxes;
	int SDL_HapticNumAxes(SDL_Haptic* haptic){ return _SDL_HapticNumAxes(__traits(parameters)); }
	private int function(SDL_Haptic* haptic, SDL_HapticEffect* effect) _SDL_HapticEffectSupported;
	int SDL_HapticEffectSupported(SDL_Haptic* haptic, SDL_HapticEffect* effect){ return _SDL_HapticEffectSupported(__traits(parameters)); }
	private int function(SDL_Haptic* haptic, SDL_HapticEffect* effect) _SDL_HapticNewEffect;
	int SDL_HapticNewEffect(SDL_Haptic* haptic, SDL_HapticEffect* effect){ return _SDL_HapticNewEffect(__traits(parameters)); }
	private int function(SDL_Haptic* haptic, int effect, SDL_HapticEffect* data) _SDL_HapticUpdateEffect;
	int SDL_HapticUpdateEffect(SDL_Haptic* haptic, int effect, SDL_HapticEffect* data){ return _SDL_HapticUpdateEffect(__traits(parameters)); }
	private int function(SDL_Haptic* haptic, int effect, uint iterations) _SDL_HapticRunEffect;
	int SDL_HapticRunEffect(SDL_Haptic* haptic, int effect, uint iterations){ return _SDL_HapticRunEffect(__traits(parameters)); }
	private int function(SDL_Haptic* haptic, int effect) _SDL_HapticStopEffect;
	int SDL_HapticStopEffect(SDL_Haptic* haptic, int effect){ return _SDL_HapticStopEffect(__traits(parameters)); }
	private int function(SDL_Haptic* haptic, int effect) _SDL_HapticDestroyEffect;
	int SDL_HapticDestroyEffect(SDL_Haptic* haptic, int effect){ return _SDL_HapticDestroyEffect(__traits(parameters)); }
	private int function(SDL_Haptic* haptic, int effect) _SDL_HapticGetEffectStatus;
	int SDL_HapticGetEffectStatus(SDL_Haptic* haptic, int effect){ return _SDL_HapticGetEffectStatus(__traits(parameters)); }
	private int function(SDL_Haptic* haptic, int gain) _SDL_HapticSetGain;
	int SDL_HapticSetGain(SDL_Haptic* haptic, int gain){ return _SDL_HapticSetGain(__traits(parameters)); }
	private int function(SDL_Haptic* haptic, int autocenter) _SDL_HapticSetAutocenter;
	int SDL_HapticSetAutocenter(SDL_Haptic* haptic, int autocenter){ return _SDL_HapticSetAutocenter(__traits(parameters)); }
	private int function(SDL_Haptic* haptic) _SDL_HapticPause;
	int SDL_HapticPause(SDL_Haptic* haptic){ return _SDL_HapticPause(__traits(parameters)); }
	private int function(SDL_Haptic* haptic) _SDL_HapticUnpause;
	int SDL_HapticUnpause(SDL_Haptic* haptic){ return _SDL_HapticUnpause(__traits(parameters)); }
	private int function(SDL_Haptic* haptic) _SDL_HapticStopAll;
	int SDL_HapticStopAll(SDL_Haptic* haptic){ return _SDL_HapticStopAll(__traits(parameters)); }
	private int function(SDL_Haptic* haptic) _SDL_HapticRumbleSupported;
	int SDL_HapticRumbleSupported(SDL_Haptic* haptic){ return _SDL_HapticRumbleSupported(__traits(parameters)); }
	private int function(SDL_Haptic* haptic) _SDL_HapticRumbleInit;
	int SDL_HapticRumbleInit(SDL_Haptic* haptic){ return _SDL_HapticRumbleInit(__traits(parameters)); }
	private int function(SDL_Haptic* haptic, float strength, uint length) _SDL_HapticRumblePlay;
	int SDL_HapticRumblePlay(SDL_Haptic* haptic, float strength, uint length){ return _SDL_HapticRumblePlay(__traits(parameters)); }
	private int function(SDL_Haptic* haptic) _SDL_HapticRumbleStop;
	int SDL_HapticRumbleStop(SDL_Haptic* haptic){ return _SDL_HapticRumbleStop(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_NumHaptics, "SDL_NumHaptics");
	lib.bindSymbol(cast(void**)&_SDL_HapticName, "SDL_HapticName");
	lib.bindSymbol(cast(void**)&_SDL_HapticOpen, "SDL_HapticOpen");
	lib.bindSymbol(cast(void**)&_SDL_HapticOpened, "SDL_HapticOpened");
	lib.bindSymbol(cast(void**)&_SDL_HapticIndex, "SDL_HapticIndex");
	lib.bindSymbol(cast(void**)&_SDL_MouseIsHaptic, "SDL_MouseIsHaptic");
	lib.bindSymbol(cast(void**)&_SDL_HapticOpenFromMouse, "SDL_HapticOpenFromMouse");
	lib.bindSymbol(cast(void**)&_SDL_JoystickIsHaptic, "SDL_JoystickIsHaptic");
	lib.bindSymbol(cast(void**)&_SDL_HapticOpenFromJoystick, "SDL_HapticOpenFromJoystick");
	lib.bindSymbol(cast(void**)&_SDL_HapticClose, "SDL_HapticClose");
	lib.bindSymbol(cast(void**)&_SDL_HapticNumEffects, "SDL_HapticNumEffects");
	lib.bindSymbol(cast(void**)&_SDL_HapticNumEffectsPlaying, "SDL_HapticNumEffectsPlaying");
	lib.bindSymbol(cast(void**)&_SDL_HapticQuery, "SDL_HapticQuery");
	lib.bindSymbol(cast(void**)&_SDL_HapticNumAxes, "SDL_HapticNumAxes");
	lib.bindSymbol(cast(void**)&_SDL_HapticEffectSupported, "SDL_HapticEffectSupported");
	lib.bindSymbol(cast(void**)&_SDL_HapticNewEffect, "SDL_HapticNewEffect");
	lib.bindSymbol(cast(void**)&_SDL_HapticUpdateEffect, "SDL_HapticUpdateEffect");
	lib.bindSymbol(cast(void**)&_SDL_HapticRunEffect, "SDL_HapticRunEffect");
	lib.bindSymbol(cast(void**)&_SDL_HapticStopEffect, "SDL_HapticStopEffect");
	lib.bindSymbol(cast(void**)&_SDL_HapticDestroyEffect, "SDL_HapticDestroyEffect");
	lib.bindSymbol(cast(void**)&_SDL_HapticGetEffectStatus, "SDL_HapticGetEffectStatus");
	lib.bindSymbol(cast(void**)&_SDL_HapticSetGain, "SDL_HapticSetGain");
	lib.bindSymbol(cast(void**)&_SDL_HapticSetAutocenter, "SDL_HapticSetAutocenter");
	lib.bindSymbol(cast(void**)&_SDL_HapticPause, "SDL_HapticPause");
	lib.bindSymbol(cast(void**)&_SDL_HapticUnpause, "SDL_HapticUnpause");
	lib.bindSymbol(cast(void**)&_SDL_HapticStopAll, "SDL_HapticStopAll");
	lib.bindSymbol(cast(void**)&_SDL_HapticRumbleSupported, "SDL_HapticRumbleSupported");
	lib.bindSymbol(cast(void**)&_SDL_HapticRumbleInit, "SDL_HapticRumbleInit");
	lib.bindSymbol(cast(void**)&_SDL_HapticRumblePlay, "SDL_HapticRumblePlay");
	lib.bindSymbol(cast(void**)&_SDL_HapticRumbleStop, "SDL_HapticRumbleStop");
}

// expansion at source/sdl/hints.d(248,1)
extern(C) @nogc nothrow __gshared{
	private SDL_bool function(const(char)* name, const(char)* value, SDL_HintPriority priority) _SDL_SetHintWithPriority;
	SDL_bool SDL_SetHintWithPriority(const(char)* name, const(char)* value, SDL_HintPriority priority){ return _SDL_SetHintWithPriority(__traits(parameters)); }
	private SDL_bool function(const(char)* name, const(char)* value) _SDL_SetHint;
	SDL_bool SDL_SetHint(const(char)* name, const(char)* value){ return _SDL_SetHint(__traits(parameters)); }
	private const(char)* function(const(char)* name) _SDL_GetHint;
	const(char)* SDL_GetHint(const(char)* name){ return _SDL_GetHint(__traits(parameters)); }
	private void function(const(char)* name, SDL_HintCallback callback, void* userdata) _SDL_AddHintCallback;
	void SDL_AddHintCallback(const(char)* name, SDL_HintCallback callback, void* userdata){ _SDL_AddHintCallback(__traits(parameters)); }
	private void function(const(char)* name, SDL_HintCallback callback, void* userdata) _SDL_DelHintCallback;
	void SDL_DelHintCallback(const(char)* name, SDL_HintCallback callback, void* userdata){ _SDL_DelHintCallback(__traits(parameters)); }
	private void function() _SDL_ClearHints;
	void SDL_ClearHints(){ _SDL_ClearHints(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_SetHintWithPriority, "SDL_SetHintWithPriority");
	lib.bindSymbol(cast(void**)&_SDL_SetHint, "SDL_SetHint");
	lib.bindSymbol(cast(void**)&_SDL_GetHint, "SDL_GetHint");
	lib.bindSymbol(cast(void**)&_SDL_AddHintCallback, "SDL_AddHintCallback");
	lib.bindSymbol(cast(void**)&_SDL_DelHintCallback, "SDL_DelHintCallback");
	lib.bindSymbol(cast(void**)&_SDL_ClearHints, "SDL_ClearHints");
}

// expansion at source/sdl/loadso.d(13,1)
extern(C) @nogc nothrow __gshared{
	private void* function(const(char)* sofile) _SDL_LoadObject;
	void* SDL_LoadObject(const(char)* sofile){ return _SDL_LoadObject(__traits(parameters)); }
	private void* function(void* handle,const(char*) name) _SDL_LoadFunction;
	void* SDL_LoadFunction(void* handle,const(char*) name){ return _SDL_LoadFunction(__traits(parameters)); }
	private void function(void* handle) _SDL_UnloadObject;
	void SDL_UnloadObject(void* handle){ _SDL_UnloadObject(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_LoadObject, "SDL_LoadObject");
	lib.bindSymbol(cast(void**)&_SDL_LoadFunction, "SDL_LoadFunction");
	lib.bindSymbol(cast(void**)&_SDL_UnloadObject, "SDL_UnloadObject");
}

// expansion at source/sdl/locale.d(19,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/log.d(58,1)
extern(C) @nogc nothrow __gshared{
	private void function(SDL_LogPriority priority) _SDL_LogSetAllPriority;
	void SDL_LogSetAllPriority(SDL_LogPriority priority){ _SDL_LogSetAllPriority(__traits(parameters)); }
	private void function(int category, SDL_LogPriority priority) _SDL_LogSetPriority;
	void SDL_LogSetPriority(int category, SDL_LogPriority priority){ _SDL_LogSetPriority(__traits(parameters)); }
	private SDL_LogPriority function(int category) _SDL_LogGetPriority;
	SDL_LogPriority SDL_LogGetPriority(int category){ return _SDL_LogGetPriority(__traits(parameters)); }
	private void function() _SDL_LogResetPriorities;
	void SDL_LogResetPriorities(){ _SDL_LogResetPriorities(__traits(parameters)); }
	private void function(const(char)* fmt, ...) _SDL_Log;
	void SDL_Log(const(char)* fmt, ...){ _SDL_Log(__traits(parameters)); }
	private void function(int category, const(char)* fmt, ...) _SDL_LogVerbose;
	void SDL_LogVerbose(int category, const(char)* fmt, ...){ _SDL_LogVerbose(__traits(parameters)); }
	private void function(int category, const(char)* fmt, ...) _SDL_LogDebug;
	void SDL_LogDebug(int category, const(char)* fmt, ...){ _SDL_LogDebug(__traits(parameters)); }
	private void function(int category, const(char)* fmt, ...) _SDL_LogInfo;
	void SDL_LogInfo(int category, const(char)* fmt, ...){ _SDL_LogInfo(__traits(parameters)); }
	private void function(int category, const(char)* fmt, ...) _SDL_LogWarn;
	void SDL_LogWarn(int category, const(char)* fmt, ...){ _SDL_LogWarn(__traits(parameters)); }
	private void function(int category, const(char)* fmt, ...) _SDL_LogError;
	void SDL_LogError(int category, const(char)* fmt, ...){ _SDL_LogError(__traits(parameters)); }
	private void function(int category, const(char)* fmt, ...) _SDL_LogCritical;
	void SDL_LogCritical(int category, const(char)* fmt, ...){ _SDL_LogCritical(__traits(parameters)); }
	private void function(int category, SDL_LogPriority priority, const(char)* fmt, ...) _SDL_LogMessage;
	void SDL_LogMessage(int category, SDL_LogPriority priority, const(char)* fmt, ...){ _SDL_LogMessage(__traits(parameters)); }
	private void function(SDL_LogOutputFunction callback, void** userdata) _SDL_LogGetOutputFunction;
	void SDL_LogGetOutputFunction(SDL_LogOutputFunction callback, void** userdata){ _SDL_LogGetOutputFunction(__traits(parameters)); }
	private void function(SDL_LogOutputFunction callback, void* userdata) _SDL_LogSetOutputFunction;
	void SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void* userdata){ _SDL_LogSetOutputFunction(__traits(parameters)); }
	private void function(int category, SDL_LogPriority priority, const(char)* fmt, va_list ap) _SDL_LogMessageV;
	void SDL_LogMessageV(int category, SDL_LogPriority priority, const(char)* fmt, va_list ap){ _SDL_LogMessageV(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_LogSetAllPriority, "SDL_LogSetAllPriority");
	lib.bindSymbol(cast(void**)&_SDL_LogSetPriority, "SDL_LogSetPriority");
	lib.bindSymbol(cast(void**)&_SDL_LogGetPriority, "SDL_LogGetPriority");
	lib.bindSymbol(cast(void**)&_SDL_LogResetPriorities, "SDL_LogResetPriorities");
	lib.bindSymbol(cast(void**)&_SDL_Log, "SDL_Log");
	lib.bindSymbol(cast(void**)&_SDL_LogVerbose, "SDL_LogVerbose");
	lib.bindSymbol(cast(void**)&_SDL_LogDebug, "SDL_LogDebug");
	lib.bindSymbol(cast(void**)&_SDL_LogInfo, "SDL_LogInfo");
	lib.bindSymbol(cast(void**)&_SDL_LogWarn, "SDL_LogWarn");
	lib.bindSymbol(cast(void**)&_SDL_LogError, "SDL_LogError");
	lib.bindSymbol(cast(void**)&_SDL_LogCritical, "SDL_LogCritical");
	lib.bindSymbol(cast(void**)&_SDL_LogMessage, "SDL_LogMessage");
	lib.bindSymbol(cast(void**)&_SDL_LogGetOutputFunction, "SDL_LogGetOutputFunction");
	lib.bindSymbol(cast(void**)&_SDL_LogSetOutputFunction, "SDL_LogSetOutputFunction");
	lib.bindSymbol(cast(void**)&_SDL_LogMessageV, "SDL_LogMessageV");
}

// expansion at source/sdl/messagebox.d(80,1)
extern(C) @nogc nothrow __gshared{
	private int function(const(SDL_MessageBoxData)* messageboxdata, int* buttonid) _SDL_ShowMessageBox;
	int SDL_ShowMessageBox(const(SDL_MessageBoxData)* messageboxdata, int* buttonid){ return _SDL_ShowMessageBox(__traits(parameters)); }
	private int function(SDL_MessageBoxFlags flags, const(char)* title, const(char)* messsage, SDL_Window* window) _SDL_ShowSimpleMessageBox;
	int SDL_ShowSimpleMessageBox(SDL_MessageBoxFlags flags, const(char)* title, const(char)* messsage, SDL_Window* window){ return _SDL_ShowSimpleMessageBox(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_ShowMessageBox, "SDL_ShowMessageBox");
	lib.bindSymbol(cast(void**)&_SDL_ShowSimpleMessageBox, "SDL_ShowSimpleMessageBox");
}

// expansion at source/sdl/misc.d(13,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/mouse.d(63,1)
extern(C) @nogc nothrow __gshared{
	private SDL_Window* function() _SDL_GetMouseFocus;
	SDL_Window* SDL_GetMouseFocus(){ return _SDL_GetMouseFocus(__traits(parameters)); }
	private uint function(int* x, int* y) _SDL_GetMouseState;
	uint SDL_GetMouseState(int* x, int* y){ return _SDL_GetMouseState(__traits(parameters)); }
	private uint function(int* x, int* y) _SDL_GetRelativeMouseState;
	uint SDL_GetRelativeMouseState(int* x, int* y){ return _SDL_GetRelativeMouseState(__traits(parameters)); }
	private void function(SDL_Window* window, int x, int y) _SDL_WarpMouseInWindow;
	void SDL_WarpMouseInWindow(SDL_Window* window, int x, int y){ _SDL_WarpMouseInWindow(__traits(parameters)); }
	private int function(SDL_bool enabled) _SDL_SetRelativeMouseMode;
	int SDL_SetRelativeMouseMode(SDL_bool enabled){ return _SDL_SetRelativeMouseMode(__traits(parameters)); }
	private SDL_bool function() _SDL_GetRelativeMouseMode;
	SDL_bool SDL_GetRelativeMouseMode(){ return _SDL_GetRelativeMouseMode(__traits(parameters)); }
	private SDL_Cursor* function(const(ubyte)* data, const(ubyte)* mask, int w, int h, int hot_x, int hot_y) _SDL_CreateCursor;
	SDL_Cursor* SDL_CreateCursor(const(ubyte)* data, const(ubyte)* mask, int w, int h, int hot_x, int hot_y){ return _SDL_CreateCursor(__traits(parameters)); }
	private SDL_Cursor* function(SDL_Surface* surface, int hot_x, int hot_y) _SDL_CreateColorCursor;
	SDL_Cursor* SDL_CreateColorCursor(SDL_Surface* surface, int hot_x, int hot_y){ return _SDL_CreateColorCursor(__traits(parameters)); }
	private SDL_Cursor* function(SDL_SystemCursor id) _SDL_CreateSystemCursor;
	SDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor id){ return _SDL_CreateSystemCursor(__traits(parameters)); }
	private void function(SDL_Cursor* cursor) _SDL_SetCursor;
	void SDL_SetCursor(SDL_Cursor* cursor){ _SDL_SetCursor(__traits(parameters)); }
	private SDL_Cursor* function() _SDL_GetCursor;
	SDL_Cursor* SDL_GetCursor(){ return _SDL_GetCursor(__traits(parameters)); }
	private SDL_Cursor* function() _SDL_GetDefaultCursor;
	SDL_Cursor* SDL_GetDefaultCursor(){ return _SDL_GetDefaultCursor(__traits(parameters)); }
	private void function(SDL_Cursor* cursor) _SDL_FreeCursor;
	void SDL_FreeCursor(SDL_Cursor* cursor){ _SDL_FreeCursor(__traits(parameters)); }
	private int function(int toggle) _SDL_ShowCursor;
	int SDL_ShowCursor(int toggle){ return _SDL_ShowCursor(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetMouseFocus, "SDL_GetMouseFocus");
	lib.bindSymbol(cast(void**)&_SDL_GetMouseState, "SDL_GetMouseState");
	lib.bindSymbol(cast(void**)&_SDL_GetRelativeMouseState, "SDL_GetRelativeMouseState");
	lib.bindSymbol(cast(void**)&_SDL_WarpMouseInWindow, "SDL_WarpMouseInWindow");
	lib.bindSymbol(cast(void**)&_SDL_SetRelativeMouseMode, "SDL_SetRelativeMouseMode");
	lib.bindSymbol(cast(void**)&_SDL_GetRelativeMouseMode, "SDL_GetRelativeMouseMode");
	lib.bindSymbol(cast(void**)&_SDL_CreateCursor, "SDL_CreateCursor");
	lib.bindSymbol(cast(void**)&_SDL_CreateColorCursor, "SDL_CreateColorCursor");
	lib.bindSymbol(cast(void**)&_SDL_CreateSystemCursor, "SDL_CreateSystemCursor");
	lib.bindSymbol(cast(void**)&_SDL_SetCursor, "SDL_SetCursor");
	lib.bindSymbol(cast(void**)&_SDL_GetCursor, "SDL_GetCursor");
	lib.bindSymbol(cast(void**)&_SDL_GetDefaultCursor, "SDL_GetDefaultCursor");
	lib.bindSymbol(cast(void**)&_SDL_FreeCursor, "SDL_FreeCursor");
	lib.bindSymbol(cast(void**)&_SDL_ShowCursor, "SDL_ShowCursor");
}

// expansion at source/sdl/mutex.d(24,1)
extern(C) @nogc nothrow __gshared{
	private SDL_mutex* function() _SDL_CreateMutex;
	SDL_mutex* SDL_CreateMutex(){ return _SDL_CreateMutex(__traits(parameters)); }
	private int function(SDL_mutex* mutex) _SDL_LockMutex;
	int SDL_LockMutex(SDL_mutex* mutex){ return _SDL_LockMutex(__traits(parameters)); }
	private int function(SDL_mutex* mutex) _SDL_TryLockMutex;
	int SDL_TryLockMutex(SDL_mutex* mutex){ return _SDL_TryLockMutex(__traits(parameters)); }
	private int function(SDL_mutex* mutex) _SDL_UnlockMutex;
	int SDL_UnlockMutex(SDL_mutex* mutex){ return _SDL_UnlockMutex(__traits(parameters)); }
	private void function(SDL_mutex* mutex) _SDL_DestroyMutex;
	void SDL_DestroyMutex(SDL_mutex* mutex){ _SDL_DestroyMutex(__traits(parameters)); }
	private SDL_semaphore* function(uint initial_value) _SDL_CreateSemaphore;
	SDL_semaphore* SDL_CreateSemaphore(uint initial_value){ return _SDL_CreateSemaphore(__traits(parameters)); }
	private void function(SDL_semaphore* sem) _SDL_DestroySemaphore;
	void SDL_DestroySemaphore(SDL_semaphore* sem){ _SDL_DestroySemaphore(__traits(parameters)); }
	private int function(SDL_semaphore* sem) _SDL_SemWait;
	int SDL_SemWait(SDL_semaphore* sem){ return _SDL_SemWait(__traits(parameters)); }
	private int function(SDL_semaphore* sem) _SDL_SemTryWait;
	int SDL_SemTryWait(SDL_semaphore* sem){ return _SDL_SemTryWait(__traits(parameters)); }
	private int function(SDL_semaphore* sem, uint ms) _SDL_SemWaitTimeout;
	int SDL_SemWaitTimeout(SDL_semaphore* sem, uint ms){ return _SDL_SemWaitTimeout(__traits(parameters)); }
	private int function(SDL_semaphore* sem) _SDL_SemPost;
	int SDL_SemPost(SDL_semaphore* sem){ return _SDL_SemPost(__traits(parameters)); }
	private uint function(SDL_semaphore* sem) _SDL_SemValue;
	uint SDL_SemValue(SDL_semaphore* sem){ return _SDL_SemValue(__traits(parameters)); }
	private SDL_cond* function() _SDL_CreateCond;
	SDL_cond* SDL_CreateCond(){ return _SDL_CreateCond(__traits(parameters)); }
	private void function(SDL_cond* cond) _SDL_DestroyCond;
	void SDL_DestroyCond(SDL_cond* cond){ _SDL_DestroyCond(__traits(parameters)); }
	private int function(SDL_cond* cond) _SDL_CondSignal;
	int SDL_CondSignal(SDL_cond* cond){ return _SDL_CondSignal(__traits(parameters)); }
	private int function(SDL_cond* cond) _SDL_CondBroadcast;
	int SDL_CondBroadcast(SDL_cond* cond){ return _SDL_CondBroadcast(__traits(parameters)); }
	private int function(SDL_cond* cond,SDL_mutex*) _SDL_CondWait;
	int SDL_CondWait(SDL_cond* cond,SDL_mutex*){ return _SDL_CondWait(__traits(parameters)); }
	private int function(SDL_cond* cond, SDL_mutex* mutex, uint ms) _SDL_CondWaitTimeout;
	int SDL_CondWaitTimeout(SDL_cond* cond, SDL_mutex* mutex, uint ms){ return _SDL_CondWaitTimeout(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_CreateMutex, "SDL_CreateMutex");
	lib.bindSymbol(cast(void**)&_SDL_LockMutex, "SDL_LockMutex");
	lib.bindSymbol(cast(void**)&_SDL_TryLockMutex, "SDL_TryLockMutex");
	lib.bindSymbol(cast(void**)&_SDL_UnlockMutex, "SDL_UnlockMutex");
	lib.bindSymbol(cast(void**)&_SDL_DestroyMutex, "SDL_DestroyMutex");
	lib.bindSymbol(cast(void**)&_SDL_CreateSemaphore, "SDL_CreateSemaphore");
	lib.bindSymbol(cast(void**)&_SDL_DestroySemaphore, "SDL_DestroySemaphore");
	lib.bindSymbol(cast(void**)&_SDL_SemWait, "SDL_SemWait");
	lib.bindSymbol(cast(void**)&_SDL_SemTryWait, "SDL_SemTryWait");
	lib.bindSymbol(cast(void**)&_SDL_SemWaitTimeout, "SDL_SemWaitTimeout");
	lib.bindSymbol(cast(void**)&_SDL_SemPost, "SDL_SemPost");
	lib.bindSymbol(cast(void**)&_SDL_SemValue, "SDL_SemValue");
	lib.bindSymbol(cast(void**)&_SDL_CreateCond, "SDL_CreateCond");
	lib.bindSymbol(cast(void**)&_SDL_DestroyCond, "SDL_DestroyCond");
	lib.bindSymbol(cast(void**)&_SDL_CondSignal, "SDL_CondSignal");
	lib.bindSymbol(cast(void**)&_SDL_CondBroadcast, "SDL_CondBroadcast");
	lib.bindSymbol(cast(void**)&_SDL_CondWait, "SDL_CondWait");
	lib.bindSymbol(cast(void**)&_SDL_CondWaitTimeout, "SDL_CondWaitTimeout");
}

// expansion at source/sdl/platform.d(13,1)
extern(C) @nogc nothrow __gshared{
	private const(char)* function() _SDL_GetPlatform;
	const(char)* SDL_GetPlatform(){ return _SDL_GetPlatform(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetPlatform, "SDL_GetPlatform");
}

// expansion at source/sdl/power.d(22,1)
extern(C) @nogc nothrow __gshared{
	private SDL_PowerState function(int* secs, int* pct) _SDL_GetPowerInfo;
	SDL_PowerState SDL_GetPowerInfo(int* secs, int* pct){ return _SDL_GetPowerInfo(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetPowerInfo, "SDL_GetPowerInfo");
}

// expansion at source/sdl/render.d(79,1)
extern(C) @nogc nothrow __gshared{
	private int function() _SDL_GetNumRenderDrivers;
	int SDL_GetNumRenderDrivers(){ return _SDL_GetNumRenderDrivers(__traits(parameters)); }
	private int function(int index, SDL_RendererInfo* info) _SDL_GetRenderDriverInfo;
	int SDL_GetRenderDriverInfo(int index, SDL_RendererInfo* info){ return _SDL_GetRenderDriverInfo(__traits(parameters)); }
	private int function(int width, int height, uint window_flags, SDL_Window** window, SDL_Renderer** renderer) _SDL_CreateWindowAndRenderer;
	int SDL_CreateWindowAndRenderer(int width, int height, uint window_flags, SDL_Window** window, SDL_Renderer** renderer){ return _SDL_CreateWindowAndRenderer(__traits(parameters)); }
	private SDL_Renderer* function(SDL_Window* window, int index, SDL_RendererFlags flags) _SDL_CreateRenderer;
	SDL_Renderer* SDL_CreateRenderer(SDL_Window* window, int index, SDL_RendererFlags flags){ return _SDL_CreateRenderer(__traits(parameters)); }
	private SDL_Renderer* function(SDL_Surface* surface) _SDL_CreateSoftwareRenderer;
	SDL_Renderer* SDL_CreateSoftwareRenderer(SDL_Surface* surface){ return _SDL_CreateSoftwareRenderer(__traits(parameters)); }
	private SDL_Renderer* function(SDL_Window* window) _SDL_GetRenderer;
	SDL_Renderer* SDL_GetRenderer(SDL_Window* window){ return _SDL_GetRenderer(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, SDL_RendererInfo* info) _SDL_GetRendererInfo;
	int SDL_GetRendererInfo(SDL_Renderer* renderer, SDL_RendererInfo* info){ return _SDL_GetRendererInfo(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, int* w, int* h) _SDL_GetRendererOutputSize;
	int SDL_GetRendererOutputSize(SDL_Renderer* renderer, int* w, int* h){ return _SDL_GetRendererOutputSize(__traits(parameters)); }
	private SDL_Texture* function(SDL_Renderer* renderer, uint format, SDL_TextureAccess access, int w, int h) _SDL_CreateTexture;
	SDL_Texture* SDL_CreateTexture(SDL_Renderer* renderer, uint format, SDL_TextureAccess access, int w, int h){ return _SDL_CreateTexture(__traits(parameters)); }
	private SDL_Texture* function(SDL_Renderer* renderer, SDL_Surface* surface) _SDL_CreateTextureFromSurface;
	SDL_Texture* SDL_CreateTextureFromSurface(SDL_Renderer* renderer, SDL_Surface* surface){ return _SDL_CreateTextureFromSurface(__traits(parameters)); }
	private int function(SDL_Texture* texture, uint* format, SDL_TextureAccess* access, int* w, int* h) _SDL_QueryTexture;
	int SDL_QueryTexture(SDL_Texture* texture, uint* format, SDL_TextureAccess* access, int* w, int* h){ return _SDL_QueryTexture(__traits(parameters)); }
	private int function(SDL_Texture* texture, ubyte r, ubyte g, ubyte b) _SDL_SetTextureColorMod;
	int SDL_SetTextureColorMod(SDL_Texture* texture, ubyte r, ubyte g, ubyte b){ return _SDL_SetTextureColorMod(__traits(parameters)); }
	private int function(SDL_Texture* texture, ubyte* r, ubyte* g, ubyte* b) _SDL_GetTextureColorMod;
	int SDL_GetTextureColorMod(SDL_Texture* texture, ubyte* r, ubyte* g, ubyte* b){ return _SDL_GetTextureColorMod(__traits(parameters)); }
	private int function(SDL_Texture* texture, ubyte alpha) _SDL_SetTextureAlphaMod;
	int SDL_SetTextureAlphaMod(SDL_Texture* texture, ubyte alpha){ return _SDL_SetTextureAlphaMod(__traits(parameters)); }
	private int function(SDL_Texture* texture, ubyte* alpha) _SDL_GetTextureAlphaMod;
	int SDL_GetTextureAlphaMod(SDL_Texture* texture, ubyte* alpha){ return _SDL_GetTextureAlphaMod(__traits(parameters)); }
	private int function(SDL_Texture* texture, SDL_BlendMode blendMode) _SDL_SetTextureBlendMode;
	int SDL_SetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode blendMode){ return _SDL_SetTextureBlendMode(__traits(parameters)); }
	private int function(SDL_Texture* texture, SDL_BlendMode* blendMode) _SDL_GetTextureBlendMode;
	int SDL_GetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode* blendMode){ return _SDL_GetTextureBlendMode(__traits(parameters)); }
	private int function(SDL_Texture* texture, const(SDL_Rect)* rect, const(void)* pixels, int pitch) _SDL_UpdateTexture;
	int SDL_UpdateTexture(SDL_Texture* texture, const(SDL_Rect)* rect, const(void)* pixels, int pitch){ return _SDL_UpdateTexture(__traits(parameters)); }
	private int function(SDL_Texture* texture, const(SDL_Rect)* rect, void** pixels, int* pitch) _SDL_LockTexture;
	int SDL_LockTexture(SDL_Texture* texture, const(SDL_Rect)* rect, void** pixels, int* pitch){ return _SDL_LockTexture(__traits(parameters)); }
	private void function(SDL_Texture* texture) _SDL_UnlockTexture;
	void SDL_UnlockTexture(SDL_Texture* texture){ _SDL_UnlockTexture(__traits(parameters)); }
	private SDL_bool function(SDL_Renderer* renderer) _SDL_RenderTargetSupported;
	SDL_bool SDL_RenderTargetSupported(SDL_Renderer* renderer){ return _SDL_RenderTargetSupported(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, SDL_Texture* texture) _SDL_SetRenderTarget;
	int SDL_SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture){ return _SDL_SetRenderTarget(__traits(parameters)); }
	private SDL_Texture* function(SDL_Renderer* renderer) _SDL_GetRenderTarget;
	SDL_Texture* SDL_GetRenderTarget(SDL_Renderer* renderer){ return _SDL_GetRenderTarget(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, const(SDL_Rect)* rect) _SDL_RenderSetClipRect;
	int SDL_RenderSetClipRect(SDL_Renderer* renderer, const(SDL_Rect)* rect){ return _SDL_RenderSetClipRect(__traits(parameters)); }
	private void function(SDL_Renderer* renderer, SDL_Rect* rect) _SDL_RenderGetClipRect;
	void SDL_RenderGetClipRect(SDL_Renderer* renderer, SDL_Rect* rect){ _SDL_RenderGetClipRect(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, int w, int h) _SDL_RenderSetLogicalSize;
	int SDL_RenderSetLogicalSize(SDL_Renderer* renderer, int w, int h){ return _SDL_RenderSetLogicalSize(__traits(parameters)); }
	private void function(SDL_Renderer* renderer, int* w, int* h) _SDL_RenderGetLogicalSize;
	void SDL_RenderGetLogicalSize(SDL_Renderer* renderer, int* w, int* h){ _SDL_RenderGetLogicalSize(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, const(SDL_Rect)* rect) _SDL_RenderSetViewport;
	int SDL_RenderSetViewport(SDL_Renderer* renderer, const(SDL_Rect)* rect){ return _SDL_RenderSetViewport(__traits(parameters)); }
	private void function(SDL_Renderer* renderer, SDL_Rect* rect) _SDL_RenderGetViewport;
	void SDL_RenderGetViewport(SDL_Renderer* renderer, SDL_Rect* rect){ _SDL_RenderGetViewport(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, float scaleX, float scaleY) _SDL_RenderSetScale;
	int SDL_RenderSetScale(SDL_Renderer* renderer, float scaleX, float scaleY){ return _SDL_RenderSetScale(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, float* scaleX, float* scaleY) _SDL_RenderGetScale;
	int SDL_RenderGetScale(SDL_Renderer* renderer, float* scaleX, float* scaleY){ return _SDL_RenderGetScale(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, ubyte r, ubyte g, ubyte b, ubyte a) _SDL_SetRenderDrawColor;
	int SDL_SetRenderDrawColor(SDL_Renderer* renderer, ubyte r, ubyte g, ubyte b, ubyte a){ return _SDL_SetRenderDrawColor(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, ubyte* r, ubyte* g, ubyte* b, ubyte* a) _SDL_GetRenderDrawColor;
	int SDL_GetRenderDrawColor(SDL_Renderer* renderer, ubyte* r, ubyte* g, ubyte* b, ubyte* a){ return _SDL_GetRenderDrawColor(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, SDL_BlendMode blendMode) _SDL_SetRenderDrawBlendMode;
	int SDL_SetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode blendMode){ return _SDL_SetRenderDrawBlendMode(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, SDL_BlendMode* blendMode) _SDL_GetRenderDrawBlendMode;
	int SDL_GetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode* blendMode){ return _SDL_GetRenderDrawBlendMode(__traits(parameters)); }
	private int function(SDL_Renderer* renderer) _SDL_RenderClear;
	int SDL_RenderClear(SDL_Renderer* renderer){ return _SDL_RenderClear(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, int x, int y) _SDL_RenderDrawPoint;
	int SDL_RenderDrawPoint(SDL_Renderer* renderer, int x, int y){ return _SDL_RenderDrawPoint(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, const(SDL_Point)* points, int count) _SDL_RenderDrawPoints;
	int SDL_RenderDrawPoints(SDL_Renderer* renderer, const(SDL_Point)* points, int count){ return _SDL_RenderDrawPoints(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, int x1, int y1, int x2, int y2) _SDL_RenderDrawLine;
	int SDL_RenderDrawLine(SDL_Renderer* renderer, int x1, int y1, int x2, int y2){ return _SDL_RenderDrawLine(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, const(SDL_Point)* points, int count) _SDL_RenderDrawLines;
	int SDL_RenderDrawLines(SDL_Renderer* renderer, const(SDL_Point)* points, int count){ return _SDL_RenderDrawLines(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, const(SDL_Rect)* rect) _SDL_RenderDrawRect;
	int SDL_RenderDrawRect(SDL_Renderer* renderer, const(SDL_Rect)* rect){ return _SDL_RenderDrawRect(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, const(SDL_Rect)* rects, int count) _SDL_RenderDrawRects;
	int SDL_RenderDrawRects(SDL_Renderer* renderer, const(SDL_Rect)* rects, int count){ return _SDL_RenderDrawRects(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, const(SDL_Rect)* rect) _SDL_RenderFillRect;
	int SDL_RenderFillRect(SDL_Renderer* renderer, const(SDL_Rect)* rect){ return _SDL_RenderFillRect(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, const(SDL_Rect)* rects, int count) _SDL_RenderFillRects;
	int SDL_RenderFillRects(SDL_Renderer* renderer, const(SDL_Rect)* rects, int count){ return _SDL_RenderFillRects(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, SDL_Texture* texture, const(SDL_Rect)* srcrect, const(SDL_Rect)* dstrect) _SDL_RenderCopy;
	int SDL_RenderCopy(SDL_Renderer* renderer, SDL_Texture* texture, const(SDL_Rect)* srcrect, const(SDL_Rect)* dstrect){ return _SDL_RenderCopy(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, SDL_Texture* texture, const(SDL_Rect)* srcrect, const(SDL_Rect)* dstrect, const(double) angle, const(SDL_Point)* center, const(SDL_RendererFlip) flip) _SDL_RenderCopyEx;
	int SDL_RenderCopyEx(SDL_Renderer* renderer, SDL_Texture* texture, const(SDL_Rect)* srcrect, const(SDL_Rect)* dstrect, const(double) angle, const(SDL_Point)* center, const(SDL_RendererFlip) flip){ return _SDL_RenderCopyEx(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, const(SDL_Rect)* rect,uint,void*,int) _SDL_RenderReadPixels;
	int SDL_RenderReadPixels(SDL_Renderer* renderer, const(SDL_Rect)* rect,uint,void*,int){ return _SDL_RenderReadPixels(__traits(parameters)); }
	private void function(SDL_Renderer* renderer) _SDL_RenderPresent;
	void SDL_RenderPresent(SDL_Renderer* renderer){ _SDL_RenderPresent(__traits(parameters)); }
	private void function(SDL_Texture* texture) _SDL_DestroyTexture;
	void SDL_DestroyTexture(SDL_Texture* texture){ _SDL_DestroyTexture(__traits(parameters)); }
	private void function(SDL_Renderer* renderer) _SDL_DestroyRenderer;
	void SDL_DestroyRenderer(SDL_Renderer* renderer){ _SDL_DestroyRenderer(__traits(parameters)); }
	private int function(SDL_Texture* texture, float* texw, float* texh) _SDL_GL_BindTexture;
	int SDL_GL_BindTexture(SDL_Texture* texture, float* texw, float* texh){ return _SDL_GL_BindTexture(__traits(parameters)); }
	private int function(SDL_Texture* texture) _SDL_GL_UnbindTexture;
	int SDL_GL_UnbindTexture(SDL_Texture* texture){ return _SDL_GL_UnbindTexture(__traits(parameters)); }
	private int function(SDL_Renderer* renderer, SDL_Texture* texture, const(float)* xy, int xy_stride, const(int)* color, int color_stride, const(float)* uv, int uv_stride, int num_vertices, const(void)* indices, int num_indices, int size_indices) _SDL_RenderGeometryRaw;
	int SDL_RenderGeometryRaw(SDL_Renderer* renderer, SDL_Texture* texture, const(float)* xy, int xy_stride, const(int)* color, int color_stride, const(float)* uv, int uv_stride, int num_vertices, const(void)* indices, int num_indices, int size_indices){ return _SDL_RenderGeometryRaw(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetNumRenderDrivers, "SDL_GetNumRenderDrivers");
	lib.bindSymbol(cast(void**)&_SDL_GetRenderDriverInfo, "SDL_GetRenderDriverInfo");
	lib.bindSymbol(cast(void**)&_SDL_CreateWindowAndRenderer, "SDL_CreateWindowAndRenderer");
	lib.bindSymbol(cast(void**)&_SDL_CreateRenderer, "SDL_CreateRenderer");
	lib.bindSymbol(cast(void**)&_SDL_CreateSoftwareRenderer, "SDL_CreateSoftwareRenderer");
	lib.bindSymbol(cast(void**)&_SDL_GetRenderer, "SDL_GetRenderer");
	lib.bindSymbol(cast(void**)&_SDL_GetRendererInfo, "SDL_GetRendererInfo");
	lib.bindSymbol(cast(void**)&_SDL_GetRendererOutputSize, "SDL_GetRendererOutputSize");
	lib.bindSymbol(cast(void**)&_SDL_CreateTexture, "SDL_CreateTexture");
	lib.bindSymbol(cast(void**)&_SDL_CreateTextureFromSurface, "SDL_CreateTextureFromSurface");
	lib.bindSymbol(cast(void**)&_SDL_QueryTexture, "SDL_QueryTexture");
	lib.bindSymbol(cast(void**)&_SDL_SetTextureColorMod, "SDL_SetTextureColorMod");
	lib.bindSymbol(cast(void**)&_SDL_GetTextureColorMod, "SDL_GetTextureColorMod");
	lib.bindSymbol(cast(void**)&_SDL_SetTextureAlphaMod, "SDL_SetTextureAlphaMod");
	lib.bindSymbol(cast(void**)&_SDL_GetTextureAlphaMod, "SDL_GetTextureAlphaMod");
	lib.bindSymbol(cast(void**)&_SDL_SetTextureBlendMode, "SDL_SetTextureBlendMode");
	lib.bindSymbol(cast(void**)&_SDL_GetTextureBlendMode, "SDL_GetTextureBlendMode");
	lib.bindSymbol(cast(void**)&_SDL_UpdateTexture, "SDL_UpdateTexture");
	lib.bindSymbol(cast(void**)&_SDL_LockTexture, "SDL_LockTexture");
	lib.bindSymbol(cast(void**)&_SDL_UnlockTexture, "SDL_UnlockTexture");
	lib.bindSymbol(cast(void**)&_SDL_RenderTargetSupported, "SDL_RenderTargetSupported");
	lib.bindSymbol(cast(void**)&_SDL_SetRenderTarget, "SDL_SetRenderTarget");
	lib.bindSymbol(cast(void**)&_SDL_GetRenderTarget, "SDL_GetRenderTarget");
	lib.bindSymbol(cast(void**)&_SDL_RenderSetClipRect, "SDL_RenderSetClipRect");
	lib.bindSymbol(cast(void**)&_SDL_RenderGetClipRect, "SDL_RenderGetClipRect");
	lib.bindSymbol(cast(void**)&_SDL_RenderSetLogicalSize, "SDL_RenderSetLogicalSize");
	lib.bindSymbol(cast(void**)&_SDL_RenderGetLogicalSize, "SDL_RenderGetLogicalSize");
	lib.bindSymbol(cast(void**)&_SDL_RenderSetViewport, "SDL_RenderSetViewport");
	lib.bindSymbol(cast(void**)&_SDL_RenderGetViewport, "SDL_RenderGetViewport");
	lib.bindSymbol(cast(void**)&_SDL_RenderSetScale, "SDL_RenderSetScale");
	lib.bindSymbol(cast(void**)&_SDL_RenderGetScale, "SDL_RenderGetScale");
	lib.bindSymbol(cast(void**)&_SDL_SetRenderDrawColor, "SDL_SetRenderDrawColor");
	lib.bindSymbol(cast(void**)&_SDL_GetRenderDrawColor, "SDL_GetRenderDrawColor");
	lib.bindSymbol(cast(void**)&_SDL_SetRenderDrawBlendMode, "SDL_SetRenderDrawBlendMode");
	lib.bindSymbol(cast(void**)&_SDL_GetRenderDrawBlendMode, "SDL_GetRenderDrawBlendMode");
	lib.bindSymbol(cast(void**)&_SDL_RenderClear, "SDL_RenderClear");
	lib.bindSymbol(cast(void**)&_SDL_RenderDrawPoint, "SDL_RenderDrawPoint");
	lib.bindSymbol(cast(void**)&_SDL_RenderDrawPoints, "SDL_RenderDrawPoints");
	lib.bindSymbol(cast(void**)&_SDL_RenderDrawLine, "SDL_RenderDrawLine");
	lib.bindSymbol(cast(void**)&_SDL_RenderDrawLines, "SDL_RenderDrawLines");
	lib.bindSymbol(cast(void**)&_SDL_RenderDrawRect, "SDL_RenderDrawRect");
	lib.bindSymbol(cast(void**)&_SDL_RenderDrawRects, "SDL_RenderDrawRects");
	lib.bindSymbol(cast(void**)&_SDL_RenderFillRect, "SDL_RenderFillRect");
	lib.bindSymbol(cast(void**)&_SDL_RenderFillRects, "SDL_RenderFillRects");
	lib.bindSymbol(cast(void**)&_SDL_RenderCopy, "SDL_RenderCopy");
	lib.bindSymbol(cast(void**)&_SDL_RenderCopyEx, "SDL_RenderCopyEx");
	lib.bindSymbol(cast(void**)&_SDL_RenderReadPixels, "SDL_RenderReadPixels");
	lib.bindSymbol(cast(void**)&_SDL_RenderPresent, "SDL_RenderPresent");
	lib.bindSymbol(cast(void**)&_SDL_DestroyTexture, "SDL_DestroyTexture");
	lib.bindSymbol(cast(void**)&_SDL_DestroyRenderer, "SDL_DestroyRenderer");
	lib.bindSymbol(cast(void**)&_SDL_GL_BindTexture, "SDL_GL_BindTexture");
	lib.bindSymbol(cast(void**)&_SDL_GL_UnbindTexture, "SDL_GL_UnbindTexture");
	lib.bindSymbol(cast(void**)&_SDL_RenderGeometryRaw, "SDL_RenderGeometryRaw");
}

// expansion at source/sdl/shape.d(44,1)
extern(C) @nogc nothrow __gshared{
	private SDL_Window* function(const(char)* title, uint x, uint y, uint w, uint h, SDL_WindowFlags flags) _SDL_CreateShapedWindow;
	SDL_Window* SDL_CreateShapedWindow(const(char)* title, uint x, uint y, uint w, uint h, SDL_WindowFlags flags){ return _SDL_CreateShapedWindow(__traits(parameters)); }
	private SDL_bool function(const(SDL_Window)* window) _SDL_IsShapedWindow;
	SDL_bool SDL_IsShapedWindow(const(SDL_Window)* window){ return _SDL_IsShapedWindow(__traits(parameters)); }
	private int function(SDL_Window* window, SDL_Surface* shape, SDL_WindowShapeMode* shape_mode) _SDL_SetWindowShape;
	int SDL_SetWindowShape(SDL_Window* window, SDL_Surface* shape, SDL_WindowShapeMode* shape_mode){ return _SDL_SetWindowShape(__traits(parameters)); }
	private int function(SDL_Window* window, SDL_WindowShapeMode* shape_mode) _SDL_GetShapedWindowMode;
	int SDL_GetShapedWindowMode(SDL_Window* window, SDL_WindowShapeMode* shape_mode){ return _SDL_GetShapedWindowMode(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_CreateShapedWindow, "SDL_CreateShapedWindow");
	lib.bindSymbol(cast(void**)&_SDL_IsShapedWindow, "SDL_IsShapedWindow");
	lib.bindSymbol(cast(void**)&_SDL_SetWindowShape, "SDL_SetWindowShape");
	lib.bindSymbol(cast(void**)&_SDL_GetShapedWindowMode, "SDL_GetShapedWindowMode");
}

// expansion at source/sdl/system.d(41,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/thread.d(88,1)
extern(C) @nogc nothrow __gshared{
	private SDL_Thread* function(SDL_ThreadFunction fn, const(char)* name, void* data) _SDL_CreateThread;
	SDL_Thread* SDL_CreateThread(SDL_ThreadFunction fn, const(char)* name, void* data){ return _SDL_CreateThread(__traits(parameters)); }
	private const(char)* function(SDL_Thread* thread) _SDL_GetThreadName;
	const(char)* SDL_GetThreadName(SDL_Thread* thread){ return _SDL_GetThreadName(__traits(parameters)); }
	private SDL_threadID function() _SDL_ThreadID;
	SDL_threadID SDL_ThreadID(){ return _SDL_ThreadID(__traits(parameters)); }
	private SDL_threadID function(SDL_Thread* thread) _SDL_GetThreadID;
	SDL_threadID SDL_GetThreadID(SDL_Thread* thread){ return _SDL_GetThreadID(__traits(parameters)); }
	private int function(SDL_ThreadPriority priority) _SDL_SetThreadPriority;
	int SDL_SetThreadPriority(SDL_ThreadPriority priority){ return _SDL_SetThreadPriority(__traits(parameters)); }
	private void function(SDL_Thread* thread, int* status) _SDL_WaitThread;
	void SDL_WaitThread(SDL_Thread* thread, int* status){ _SDL_WaitThread(__traits(parameters)); }
	private SDL_TLSID function() _SDL_TLSCreate;
	SDL_TLSID SDL_TLSCreate(){ return _SDL_TLSCreate(__traits(parameters)); }
	private void* function(SDL_TLSID id) _SDL_TLSGet;
	void* SDL_TLSGet(SDL_TLSID id){ return _SDL_TLSGet(__traits(parameters)); }
	private int function(SDL_TLSID id, const(void)* value, TLSDestructor destructor) _SDL_TLSSet;
	int SDL_TLSSet(SDL_TLSID id, const(void)* value, TLSDestructor destructor){ return _SDL_TLSSet(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_CreateThread, "SDL_CreateThread");
	lib.bindSymbol(cast(void**)&_SDL_GetThreadName, "SDL_GetThreadName");
	lib.bindSymbol(cast(void**)&_SDL_ThreadID, "SDL_ThreadID");
	lib.bindSymbol(cast(void**)&_SDL_GetThreadID, "SDL_GetThreadID");
	lib.bindSymbol(cast(void**)&_SDL_SetThreadPriority, "SDL_SetThreadPriority");
	lib.bindSymbol(cast(void**)&_SDL_WaitThread, "SDL_WaitThread");
	lib.bindSymbol(cast(void**)&_SDL_TLSCreate, "SDL_TLSCreate");
	lib.bindSymbol(cast(void**)&_SDL_TLSGet, "SDL_TLSGet");
	lib.bindSymbol(cast(void**)&_SDL_TLSSet, "SDL_TLSSet");
}

// expansion at source/sdl/timer.d(25,1)
extern(C) @nogc nothrow __gshared{
	private uint function() _SDL_GetTicks;
	uint SDL_GetTicks(){ return _SDL_GetTicks(__traits(parameters)); }
	private ulong function() _SDL_GetPerformanceCounter;
	ulong SDL_GetPerformanceCounter(){ return _SDL_GetPerformanceCounter(__traits(parameters)); }
	private ulong function() _SDL_GetPerformanceFrequency;
	ulong SDL_GetPerformanceFrequency(){ return _SDL_GetPerformanceFrequency(__traits(parameters)); }
	private void function(uint ms) _SDL_Delay;
	void SDL_Delay(uint ms){ _SDL_Delay(__traits(parameters)); }
	private SDL_TimerID function(uint interval, SDL_TimerCallback callback, void* param) _SDL_AddTimer;
	SDL_TimerID SDL_AddTimer(uint interval, SDL_TimerCallback callback, void* param){ return _SDL_AddTimer(__traits(parameters)); }
	private SDL_bool function(SDL_TimerID id) _SDL_RemoveTimer;
	SDL_bool SDL_RemoveTimer(SDL_TimerID id){ return _SDL_RemoveTimer(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_GetTicks, "SDL_GetTicks");
	lib.bindSymbol(cast(void**)&_SDL_GetPerformanceCounter, "SDL_GetPerformanceCounter");
	lib.bindSymbol(cast(void**)&_SDL_GetPerformanceFrequency, "SDL_GetPerformanceFrequency");
	lib.bindSymbol(cast(void**)&_SDL_Delay, "SDL_Delay");
	lib.bindSymbol(cast(void**)&_SDL_AddTimer, "SDL_AddTimer");
	lib.bindSymbol(cast(void**)&_SDL_RemoveTimer, "SDL_RemoveTimer");
}

// expansion at source/sdl/vulkan.d(16,1)
extern(C) @nogc nothrow __gshared{
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
}

// expansion at source/sdl/package.d(88,1)
extern(C) @nogc nothrow __gshared{
	private int function(uint flags) _SDL_Init;
	int SDL_Init(uint flags){ return _SDL_Init(__traits(parameters)); }
	private int function(uint flags) _SDL_InitSubSystem;
	int SDL_InitSubSystem(uint flags){ return _SDL_InitSubSystem(__traits(parameters)); }
	private void function(uint flags) _SDL_QuitSubSystem;
	void SDL_QuitSubSystem(uint flags){ _SDL_QuitSubSystem(__traits(parameters)); }
	private uint function(uint flags) _SDL_WasInit;
	uint SDL_WasInit(uint flags){ return _SDL_WasInit(__traits(parameters)); }
	private void function() _SDL_Quit;
	void SDL_Quit(){ _SDL_Quit(__traits(parameters)); }
}

import bindbc.loader: SharedLib, bindSymbol;
void bindModuleSymbols(SharedLib lib) @nogc nothrow{
	lib.bindSymbol(cast(void**)&_SDL_Init, "SDL_Init");
	lib.bindSymbol(cast(void**)&_SDL_InitSubSystem, "SDL_InitSubSystem");
	lib.bindSymbol(cast(void**)&_SDL_QuitSubSystem, "SDL_QuitSubSystem");
	lib.bindSymbol(cast(void**)&_SDL_WasInit, "SDL_WasInit");
	lib.bindSymbol(cast(void**)&_SDL_Quit, "SDL_Quit");
}

// expansion at source/sdl/package.d(141,1)

void unloadSDL(){ if(lib != invalidHandle) lib.unload(); }

bool isSDLLoaded(){ return lib != invalidHandle; }

SDLSupport loadSDL(){
	const(char)[][libNamesCT.length] libNames = libNamesCT;
	
	SDLSupport ret;
	foreach(name; libNames){
		ret = loadSDL(name.ptr);
		//TODO: keep trying until we get the version we want, otherwise default to the highest one?
		if(ret != SDLSupport.noLibrary && ret != SDLSupport.badLibrary) break;
	}
	return ret;
}

SDLSupport loadSDL(const(char)* libName){
	lib = bindbc.loader.load(libName);
	if(lib == invalidHandle){
		return SDLSupport.noLibrary;
	}
	
	auto errCount = errorCount();
	loadedVersion = SDLSupport.badLibrary;

	sdl.bindModuleSymbols(lib);
	sdl.assert_.bindModuleSymbols(lib);
	sdl.atomic.bindModuleSymbols(lib);
	sdl.audio.bindModuleSymbols(lib);
	sdl.bits.bindModuleSymbols(lib);
	sdl.blendmode.bindModuleSymbols(lib);
	sdl.clipboard.bindModuleSymbols(lib);
	sdl.cpuinfo.bindModuleSymbols(lib);
	sdl.endian.bindModuleSymbols(lib);
	sdl.error.bindModuleSymbols(lib);
	sdl.events.bindModuleSymbols(lib);
	sdl.filesystem.bindModuleSymbols(lib);
	sdl.gamecontroller.bindModuleSymbols(lib);
	sdl.gesture.bindModuleSymbols(lib);
	sdl.guid.bindModuleSymbols(lib);
	sdl.haptic.bindModuleSymbols(lib);
	sdl.hidapi.bindModuleSymbols(lib);
	sdl.hints.bindModuleSymbols(lib);
	sdl.joystick.bindModuleSymbols(lib);
	sdl.keyboard.bindModuleSymbols(lib);
	sdl.keycode.bindModuleSymbols(lib);
	sdl.loadso.bindModuleSymbols(lib);
	sdl.locale.bindModuleSymbols(lib);
	sdl.log.bindModuleSymbols(lib);
	sdl.messagebox.bindModuleSymbols(lib);
	sdl.misc.bindModuleSymbols(lib);
	sdl.mouse.bindModuleSymbols(lib);
	sdl.mutex.bindModuleSymbols(lib);
	sdl.pixels.bindModuleSymbols(lib);
	sdl.platform.bindModuleSymbols(lib);
	sdl.power.bindModuleSymbols(lib);
	sdl.rect.bindModuleSymbols(lib);
	sdl.render.bindModuleSymbols(lib);
	sdl.rwops.bindModuleSymbols(lib);
	sdl.scancode.bindModuleSymbols(lib);
	sdl.sensor.bindModuleSymbols(lib);
	sdl.shape.bindModuleSymbols(lib);
	sdl.stdinc.bindModuleSymbols(lib);
	sdl.surface.bindModuleSymbols(lib);
	sdl.system.bindModuleSymbols(lib);
	sdl.syswm.bindModuleSymbols(lib);
	sdl.thread.bindModuleSymbols(lib);
	sdl.timer.bindModuleSymbols(lib);
	sdl.touch.bindModuleSymbols(lib);
	sdl.version_.bindModuleSymbols(lib);
	sdl.video.bindModuleSymbols(lib);
	sdl.vulkan.bindModuleSymbols(lib);
	
	if(errCount == errorCount()) loadedVersion = sdlSupport; //this is a white-lie in order to maintain backwards-compatibility :(
	return loadedVersion;
}

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/format/internal/write.d(1993,40)
(in ref int a) => a

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/format/spec.d(170,13)
private ubyte _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf;@property bool flDash() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 1U) != 0;}
@property void flDash(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 1U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))1U);}
@property bool flZero() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 2U) != 0;}
@property void flZero(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 2U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))2U);}
@property bool flSpace() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 4U) != 0;}
@property void flSpace(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 4U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))4U);}
@property bool flPlus() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 8U) != 0;}
@property void flPlus(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 8U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))8U);}
@property bool flHash() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 16U) != 0;}
@property void flHash(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 16U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))16U);}
@property bool flEqual() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 32U) != 0;}
@property void flEqual(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 32U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))32U);}
@property bool flSeparator() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf & 64U) != 0;}
@property void flSeparator(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf |= 64U;else _flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flEqual_flSeparator__bf))64U);}

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/functional.d(449,16)
cast(T)a < cast(T) b

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/functional.d(449,16)
cast(T)a < cast(T) b

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/functional.d(219,13)
alias a = __a ;

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/functional.d(220,13)
alias b = __b ;

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/functional.d(221,20)
a == b

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(445,13)
enum int data = 0;

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(445,13)
enum int count = 0;

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(624,9)
alias _0LU = Identity!(field[0LU]);alias data = _0LU;alias _1LU = Identity!(field[1LU]);alias count = _1LU;

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(624,9)
alias _0LU = Identity!(field[0LU]);alias _1LU = Identity!(field[1LU]);

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7004,17)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7021,21)

    case '\u0000':..case '\u0008':case '\u000E':..case '\u001F':case '\u007F':..
    case '\u0084':case '\u0086':..case '\u009F': case '\u0009':..case '\u000C': case '\u0085':

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7030,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7034,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7040,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7044,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7049,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7056,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7060,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7068,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7082,13)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7004,17)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7021,21)

    case '\u0000':..case '\u0008':case '\u000E':..case '\u001F':case '\u007F':..
    case '\u0084':case '\u0086':..case '\u009F': case '\u0009':..case '\u000C': case '\u0085':

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7030,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7034,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7040,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7044,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7049,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7056,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7060,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7068,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/uni/package.d(7082,13)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs < rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs < rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs == rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs < rhs

// expansion at /home/me/dlang/dmd-2.100.0/linux/bin64/../../src/phobos/std/typecons.d(517,31)
lhs < rhs

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

